nrow(car) # 이름들 갯수(행)
ncol(car) # 이름들 갯수(열)
# 3번 문제
str(car)
# 4번 문제
car1 <- subset(car,
# select = mpg, (mpg 만 출력하고 싶을때 적음.)
subset = mpg >= max(mpg)); car1
# 5번 문제
car2_1 <- subset(car,
subset =  gear == 4) ; car2_1
car2_2 <- min(car2_1[,'mpg'])
car2_2
car2_3 <- subset(car,
subset = ( c(mpg) <= car2_2 & gear == 4 )); car2_3
#car2_4 <- subset(car,
#                 subset = ( c(mpg) <= min(car[,'mpg']) & gear == 4 )); car2_4
# min 함수로 하면 값이없다고 뜸.
# 6번 문제
car[c("Honda Civic"),c('mpg','gear') ]
# 7번 문제
firempg <- car[c("Pontiac Firebird"),c('mpg')]
firempg
car3 <- subset(car,
subset = firempg < c(mpg)); car3
# 8번 문제
cat("자동차들의 평균 연비는",
mean(car[,1]),"입니다.")
# 9번 문제
cat("mtcars에 포함된 자동차들의 기어의 종류는",
unique(car[,c('gear')]),"입니다.")
# 4set
# setwd("D:/test1/lyt09/workR")
# air <- read.csv("airquality.csv", header = T)
# 1번문제
setwd("C:/Users/82105/Desktop/빅데이터교육/r/lyt09/workR")
air <- read.csv("airquality2.csv", header = T)
str(air)
class(air)
# 2번문제
head(air)
# 3번문제
Hightemp <- subset(air,
select = c(Temp,Month,Day) ,
subset = c(Temp) >= max(Temp) )
Hightemp
# 4번문제
strWind1 <- subset(air,
select = c(Wind,Month,Day),
subset = (c(Month) == 6) )
strWind1
strWind1_1 <- max(strWind1[,'Wind'])
strWind <- subset(air,
select = c(Wind,Month,Day),
subset = c(Wind) >=  strWind1_1 & c(Month) == 6  )
strWind
# 5번문제
meanTemp <- subset(air,
select = c(Temp),
subset = c(Month) == 7)
cat("7월 평균 기온은",apply(meanTemp, 2, mean),"도 입니다.")
# 6번 문제
sum(air[1,])
Ozone1 <- subset(air,
select = c(ozone,Month,Day),
subset = c(ozone) > 100); Ozone1
nrow(Ozone1)
# 5 SET
ds1 <- data.frame(state.x77)
ds1
top_rich <- subset(ds1,
select = c(Income,Population,Area),
subset = c(Income) >= 5000)
top_rich
setwd("d:/lyt")
write.csv(top_rich, "rich_state1.csv", row.names = T)
ds <- read.csv("rich_state1.csv", header = T)
ds
# 끝
setwd("d:/lyt")
write.csv(top_rich, "rich_state1.csv", row.names = T)
ds <- read.csv("rich_state1.csv", header = T)
ds
ds <- read.csv( 'rich_state.csv', header = T )
rownames( ds ) <- ds$X
ds <- ds[ ,-1 ]
ds
rownames( ds ) <- ds$X
ds <- ds[ ,-1 ]
ds
ds
ds <- read.csv("rich_state1.csv", header = T)
rownames( ds ) <- ds$X
ds <- ds[ ,-1 ]
ds
source('D:/day4_answer.R', encoding = 'UTF-8', echo=TRUE)
max.life <- max( st$Life.Exp )
rownames( subset( st, Life.Exp == max.life ) )
pen.income <- st[ 'Pennsylvania','Income' ]
rownames( subset( st, Income > pen.income ) )
max.mpg <- max( mtcars$mpg )
rownames( mtcars[ mtcars$mpg == max.mpg, ] ) # 방법 1
min.mpg <- min( mtcars[ mtcars$gear == 4, 'mpg' ] )
rownames( mtcars[ mtcars$mpg == min.mpg, ] ) # 방법 1
mtcars[ 'Honda Civic','mpg' ]
pon.mpg <- mtcars[ 'Pontiac Firebird','mpg' ]
rownames( mtcars[ mtcars$mpg > pon.mpg, ] ) # 방법 1
mean( mtcars$mpg )
unique(mtcars$gear)
class( airquality )
head( airquality )
max.temp <- max( airquality$Temp )
airquality[ airquality$Temp == max.temp, c( 'Month','Day' ) ]       # 방법 1
subset( airquality, Temp == max.temp, select = c( 'Month','Day' ) ) # 방법 2
air <- data.frame(airquality)
Hightemp <- subset(air,
select = c(Temp,Month,Day) ,
subset = c(Temp) >= max(Temp) )
Hightemp
strWind1 <- subset(air,
select = c(Wind,Month,Day),
subset = (c(Month) == 6) )
strWind1
strWind1_1 <- max(strWind1[,'Wind'])
strWind <- subset(air,
select = c(Wind,Month,Day),
subset = c(Wind) >=  strWind1_1 & c(Month) == 6  )
strWind
meanTemp <- subset(air,
select = c(Temp),
subset = c(Month) == 7)
cat("7월 평균 기온은",apply(meanTemp, 2, mean),"도 입니다.")
# 6번 문제
sum(air[1,])
Ozone1 <- subset(air,
select = c(ozone,Month,Day),
subset = c(ozone) > 100); Ozone1
nrow(Ozone1)
Ozone1 <- subset(air,
select = c(ozone,Month,Day),
subset = c(ozone) > 100); Ozone1
Ozone1 <- subset(air,
select = c(Ozone,Month,Day),
subset = c(Ozone) > 100); Ozone1
nrow(Ozone1)
setwd("D:/lyt/lyt09/workR")
df <- read.table(file= "airqulity.txt", header = T)
setwd("D:/lyt/lyt09/workR")
df <- read.table(file= "airquality", header = T)
df
df <- read.table(file= "airquality", header = T)
df <- read.table("airquality", header = T)
df <- read.table("airquality.txt", header = T)
df
class(df)
dim(df)
str(df)
head(df,3)
tail(df,3)
install.packages("xlsx")
install.packages("rJava")
library(rJava)
library(xlsx)
library(xlsxjars)
df.xlsx <- read.xlsx(file = "airquality.txt", sheetIndex = 1,
encoding = "UTF-8")
df.xlxs
df.xlsx <- read.xlsx(file = "airquality.txt", sheetIndex = 1,
encoding = "UTF-8")
setwd("D:/lyt/lyt09/workR")
df.xlsx <- read.xlsx(file = "airquality.xlsx", sheetIndex = 1,
encoding = "UTF-8")
df.xlxs
df.xlsx <- read.xlsx(file = "airquality.xlsx", sheetIndex = 1,
encoding = "UTF-8")
df.xlxs
df.xlsx
class(df.xlsx)
st(df.xlsx)
head(df.xlsx)
tail(df.xlsx)
str(df.xlsx)
attach(df)
Ozone
as.integer(Ozone)
str(df.xlsx)
df.xlsx
score <- c(76,84,69,50,95,6,82,71,88,84)
which(score == 69)
which(score >= 85)
max(score)
which.max(score)
which.max(score)
min(score)
which.min(score)
idx <- which(score>=60)
score[idx] <- 61
score
score
idx <- which(iris [ , 1:4] > 5.0, arr.ind = T)
idx
which(score >= 85)
which(score >= 85)
score <- c(76,84,69,50,95,6,82,71,88,84)
which(score == 69)
which(score >= 85)
df.xlsx
idx
idx <- which(score>=60)
score[idx] <- 61
score
score <- c(76,84,69,50,95,6,82,71,88,84)
id <- which(score>=60)
id
score[id] <- 61
score
id
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL', 'SUMMER', 'SPRING', 'SPRING')
favorite
class(favorite)
table(faborite)
table(faborite) / length(favorite)
ds <- table(faborite)
ds
barplot(ds, main = 'favorite season')
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL', 'SUMMER', 'SPRING', 'SPRING')
favorite
class(favorite)
table(favorite)
table(favorite) / length(favorite)
ds <- table(favorite)
ds
barplot(ds, main = 'favorite season
barplot(ds, main = 'favorite season')
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL', 'SUMMER', 'SPRING', 'SPRING')
favorite
class(favorite)
table(favorite)
table(favorite) / length(favorite)
ds <- table(favorite)
ds
barplot(ds, main = 'favorite season')
class(favorite)
table(favorite)
table(favorite) / length(favorite)
ds <- table(favorite)
ds
barplot(ds, main = 'favorite season')
length(favorite)
table(favorite)
barplot(ds, main = 'favorite season')
ds.new <- ds[c(2,3,1,4)]
ds.new
barplot(ds.new, main = 'Favorit season')
favorite <- c('WINTER', 'SUMMER', 'SPRING',
'SUMMER', 'SUMMER', 'FALL',
'FALL', 'SUMMER', 'SPRING', 'SPRING')
class(favorite)
table(favorite)
ds
source('D:/lyt/lyt09/workR/4.r', encoding = 'UTF-8', echo=TRUE)
install.packages("rJava")
library(rJava)
library(xlsx)
library(xlsxjars)
pie(ds.new, main = 'Favorit season')
pie(ds,main = 'Favorit season')
pie(ds.new, main = 'Favorit season')
pie(ds,main = 'Favorit season')
pie(ds.new, main = 'Favorit season')
pie(ds.new, main = '좋아하는 날씨')
favorite.color <- c(2,3,2,1,1,2,2,1,3,2,1,3,2,1,2)
ds <- table(fovorite.color)
ds <- table(favorite.color)
barplot(ds, main = 'favorite season')
colors <- c('Green', 'red', 'blue')
name(ds) <- colors;   ds
names(ds) <- colors;   ds
barplot(ds, main = 'favorite season', col = colors)
pie(ds, main = 'favorite season', col = colors)
barplot(ds, main = 'favorite season', col = colors)
colors
names(ds) <- colors;   ds
str(favorite.color)
dim(favorite.color)
dim(favorite.color)
table(favorite.color)
barplot(ds, main = 'favorite season')
colors <- c('red', 'Green', 'blue')
pie(ds, main = 'favorite season', col = colors)
barplot(ds, main = 'favorite season', col = colors)
colors <- c('Green', 'Red', 'blue')
barplot(ds, main = 'favorite season', col = colors)
source('D:/lyt/lyt09/workR/4.r', encoding = 'UTF-8', echo=TRUE)
install.packages("xlsx")
library(rJava)
library(xlsx)
library(xlsxjars)
library(rJava)
library(xlsx)
library(xlsxjars)
weight <- c(60,62,64,65,68,69); weight
weight.heavy <- c(weight, 120); weight.heavy
mean(weight); mean(weight.heavy)
median(weight); median(weight.heavy)
mean(weight, trim = 0.2)
mean(weight.heavy, trim = 0.2)
table(weight)
barplot(weight,main = 'test')
names(weight,c('1','2','3','4','5','6'))
names(weight,c('z','zz','aa','ss','dd','df' ))
barplot(weight,main = 'test')
barplot(weight,main = 'test',col = colers)
barplot(weight,main = 'test',col = colors)
we <- table(weight)
names(we,c('z','zz','aa','ss','dd','df' ))
names(we) <-c('z','zz','aa','ss','dd','df' )
barplot(weight,main = 'test',col = colors)
barplot(we,main = 'test',col = colors)
we
we <- table(weight)
we
barplot(we,main = 'test',col = colors)
quantity( weight.heavy )
quantity( weight.heavy, (0:10) / 10 )
quantile( weight.heavy )
quantile( weight.heavy, (0:10) / 10 )
weight <- c(60,62,64,65,68,69); weight
barplot(weight,main = 'test',col = colors)
names(weight) <-c('z','zz','aa','ss','dd','df' )
barplot(weight,main = 'test',col = colors)
summary(weight.heavy)
# # # # 산포 # # # #
# 분산
var(weight)
# 표준편차
sd(weight)
# 값의 범위 (최소값과 최대값)
range(weight)
# 최대값과 최소값의 차이
diff(range (weight))
str(cars)
dist <- cars[,2]
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =2 , breaks = 5)
source('D:/lyt/lyt09/workR/4.r', encoding = 'UTF-8', echo=TRUE)
install.packages("xlsx")
dist
library(rJava)
library(xlsx)
library(xlsxjars)
str(cars)
dist <- cars[,2]
View(air)
View(st2)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =1 , breaks = 5)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =0 , breaks = 5)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =1 , breaks = 5)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =2 , breaks = 5)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =3 , breaks = 5)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =0 , breaks = 5)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =0 , breaks = 6)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =0 , breaks = 8)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =1 , breaks = 8)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =1 , breaks = 4)
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =1 , breaks = 5)
boxplot(dist, main= '자동차 제동거리')
boxplot(dist, main= '자동차 제동거리', las=1)
boxplot(dist, main= '자동차 제동거리', las=1,
xlab = "제동거리", ylab = "빈도수")
boxplot(dist, main= '자동차 제동거리', las=1,
ylab = "빈도수")
boxplot.stats(dist)
boxplot.stats(dist)$stats # 정상범위 사분위수
boxplot.stats(dist)$n     # 관측치 개수
boxplot.stats(dist)$conf  # 중앙값 신뢰구간
boxplot.stats(dist)$out   # 이상치(특이값)
# 일변량중 그룹으로 구성된 자료의 상자그림
boxplot(Petal.Length~Species,
data = iris,
main = '품종별 꽃잎의 길이')
# 일변량중 그룹으로 구성된 자료의 상자그림
boxplot(Petal.Length~Species,
data = iris,
main = '품종별 꽃잎의 길이',
las=1)
boxplot(iris$Petal.Length~iris$Species,
main = '품종별 꽃잎의 길이')
# 일변량중 그룹으로 구성된 자료의 상자그림
boxplot(Petal.Length~Species,
data = iris,
main = '품종별 꽃잎의 길이',
las=1)
boxplot(iris$Petal.Length~iris$Species,
main = '품종별 꽃잎의 길이')
# 일변량중 그룹으로 구성된 자료의 상자그림
boxplot(Petal.Length~Species,
data = iris,
main = '품종별 꽃잎의 길이',
las=1)
boxplot(iris$Petal.Length~iris$Species,
main = '품종별 꽃잎의 길이',
xlab = "꽃의 종류", ylab = "꽃의 길이")
par(mfrow = c(1,3)) # 1 X 3 가상화면 분할
barplot(table(mtcars$carb), main = "c",
xlab = "carburetors", ylab = 'freq',
col = "blue")
barplot(table(mtcars$carb), main = "cyl",
xlab = "cyl", ylab = 'freq',
col = "red")
barplot(table(mtcars$carb), main = "g",
xlab = "cgear", ylab = 'freq',
col = "green")
par(mfrow = c(1,3)) # 1 X 3 가상화면 분할
barplot(table(mtcars$carb), main = "c",
xlab = "carburetors", ylab = 'freq',
col = "blue")
barplot(table(mtcars$cyl), main = "cyl",
xlab = "cyl", ylab = 'freq',
col = "red")
barplot(table(mtcars$gear), main = "g",
xlab = "cgear", ylab = 'freq',
col = "green")
par(mfrow = c(1,3)) # 1 X 3 가상화면 분할
barplot(table(mtcars$carb), main = "c",
xlab = "carburetors", ylab = 'freq',
col = "blue", las=1)
barplot(table(mtcars$cyl), main = "cyl",
xlab = "cyl", ylab = 'freq',
col = "red", las=1)
barplot(table(mtcars$gear), main = "g",
xlab = "cgear", ylab = 'freq',
col = "green", las=1)
par(mfrow = c(1,3)) # 1 X 3 가상화면 분할
barplot(table(mtcars$carb), main = "c",
xlab = "carburetors", ylab = 'freq',
col = "blue", las=1)
barplot(table(mtcars$cyl), main = "cyl",
xlab = "cyl", ylab = 'freq',
col = "red", las=1)
barplot(table(mtcars$gear), main = "g",
xlab = "gear", ylab = 'freq',
col = "green", las=1)
par(mfrow = c(1,1))
dist <- cars[,2]
hist(dist,main = "Histogram for 제동거리",
xlab = "제동거리", ylab = "빈도수",
border = "blue", col = 'green',
las =1 , breaks = 5)
quantile( weight.heavy )
ds.new
barplot(ds.new, main = 'Favorit season')
pie(ds.new, main = '좋아하는 날씨')
favorite.color <- c(2,3,2,1,1,2,2,1,3,2,1,3,2,1,2)
ds <- table(favorite.color)
barplot(ds, main = 'favorite season')
colors <- c('Green', 'Red', 'blue')
names(ds) <- colors;   ds
barplot(ds, main = 'favorite season', col = colors)
pie(ds, main = 'favorite season', col = colors)
gender <- c('F','F','F','M','M','F','F','F','M','M')
hist(gender, main = "남녀 성별 갯수파악")
gender <- c('F','F','F','M','M','F','F','F','M','M')
barplot(gender, main = "남녀 성별 갯수파악")
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
barplot(gender2, main = "남녀 성별 갯수파악")
barplot(gender2, main = "남녀 성별 갯수파악")
barplot(gender2, main = "남녀 성별 갯수파악")
barplot(gender2, main = "남녀 성별 갯수파악")
barplot(gender2, main = "남녀 성별 갯수파악")
