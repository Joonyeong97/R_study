barplot(gender2, main = "남녀 성별 갯수파악")
barplot(gender2, main = "남녀 성별 갯수파악")
gender <- c('F','F','F','M','M','F','F','F','M','M')
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
library(rJava)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
gender <- c('F','F','F','M','M','F','F','F','M','M')
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
gender <- c('F','F','F','M','M','F','F','F','M','M')
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
gender <- c('F','F','F','M','M','F','F','F','M','M')
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
source('D:/lyt/lyt09/문제/day5__lyt.R', encoding = 'UTF-8', echo=TRUE)
gender <- c('F','F','F','M','M','F','F','F','M','M')
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
gender <- c('F','F','F','M','M','F','F','F','M','M')
gender2 <- table(gender)
barplot(gender2, main = "남녀 성별 갯수파악")
pie(gender2, main = "남녀 성별 갯수 파악")
library(xlsx)
library(xlsxjars)
pie(gender2, main = "남녀 성별 갯수 파악")
pie(gender2, main = "남녀 성별 갯수 파악",
col = 'green')
pie(gender2, main = "남녀 성별 갯수 파악",
col = 'green','red')
pie(gender2, main = "남녀 성별 갯수 파악",
col = 'green')
pie(gender2, main = "남녀 성별 갯수 파악",
col = 'green', col = 'red')
pie(gender2, main = "남녀 성별 갯수 파악")
gender2 <- table(gender)
gender2
season <- c('여름','겨울','봄','가을','여름','가을','겨울',
'여름', '여름', '가을')
season <- table(season)
season
barplot(season, main = '계절'
)
barplot(season, main = '계절'
, las =1)
pie(season , main = "계절 빈도수", las = 1,)
pie(season , main = "계절 빈도수")
score <- c(90,85,73,80,85,65,78,50,68,96)
colnames(score['KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART'])
colnames(score('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
score
colnames(score('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART'))
score
colnames(score('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART'))
score <- c(90,85,73,80,85,65,78,50,68,96)
colnames(score['KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART'])
row.names(score['KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART'])
score <- c(90,85,73,80,85,65,78,50,68,96)
colnames(score['KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART'])
score
colnames(score) <-c('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
row.names(score) <-c('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
gender <- matrix(c(10,21,40,60,60,70,20,30),4,2) # 매트릭스함수 선언
colnames(gender) <- c("male","female") # 열 이름을 Male / Female 입력
gender[2,] # 2행에 있는 값 출력
gender[,"female"] # female 값 출력
gender[3,2] # 3행 2열 출력
gender
row.names(score) <- c('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
score
score
row.names()
row.names(score)
score
row.names(score) <- c('r','2')
score <- data.frame(row.names = 'KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
score
score <- c(90,85,73,80,85,65,78,50,68,96)
score.names <- c ('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
score.2 <- data.frame(score,row.names = score.names)
score.2
summary(score.2)
mean(score.2)
mean(score[,1])
summary(score.2)
mean(score)
mean(score.2)
mean(score.2[,2])
mean(score.2[,1])
median(score.2[,1])
간값
sd(score.2[,1]) # 표준편차
max(score.2[,1]) # MAX값
boxplot(score.2, main = '과목')
boxplot(score.2, main = '점수표',
las = 1, xlap = '과목', ylap = '점수')
boxplot.stats(score.2)
boxplot.stats(score.2[,2])
boxplot.stats(score)
boxplot.stats(score)$out
score <- c(90,85,73,80,85,65,78,50,68,96)
names(score) <- c ('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
score
mean(score) # 평균값
median(score) # 중간값
sd(score) # 표준편차
max(score) # MAX값
boxplot(score, main = '점수표',
las = 1, xlap = '과목', ylap = '점수')
hist(score, main = '학생 성적',
col = 'people')
hist(score, main = '학생 성적',
col = 'violet')
hist(score, main = '학생 성적',
col = 'violet', Border = 'blue')
hist(score, main = '학생 성적',
col = 'violet', border = 'blue')
hist(score, main = '학생 성적',
col = 'violet')
hist(score, main = '학생 성적',
col = 'violet', xlab = '점수표', ylab = '비율',
las = 1)
boxplot(score, main = '점수표',
las = 1, xlab = '과목', ylab = '점수')
score
score <- c(90,85,73,80,85,65,78,50,68,120)
names(score) <- c ('KOR','ENG','ATH','HIST','SOC','MUSIC','BIO',
'EARTH','PHY','ART')
score
boxplot(score, main = '점수표',
las = 1, xlab = '과목', ylab = '점수')
hist(score, main = '학생 성적',
col = 'violet', xlab = '점수표', ylab = '비율',
las = 1)
boxplot.stats(score)$out
summary(score)
score2 <- boxplot.stats(score)$out
score2
mtcars
mtcars[,'wt']
score <- c(90,85,73,80,85,65,78,50,68,110)
hist(score, main = '학생 성적',
col = 'violet', xlab = '점수표', ylab = '비율',
las = 1)
mtcars[,'wt']
mt2 <- mtcars[,'wt']
mt2
summary(mt2)
quantile(mt2,15)
quantile(mt2,1:10,15)
quantile(mt2,(1:10),15)
quantile(mt2,(1:10)/15)
quantile(mt2,/15)
quantile(mt2,(/15))
quantile(mt2,1:8/15)
quantile(mt2,1:7/15)
quantile(mt2,1:6/15)
quantile(mt2,(1:3)/15)
quantile(mt2,(1:6)/30)
quantile(mt2,(1:6)/50)
quantile(mt2,(1:6)/80)
quantile(mt2,(1:6)/5)
quantile(mt2,(1:6)/5)
quantile(mt2,(1:6)/10)
quantile(mt2,(1:6)/15)
q
quantile(mt2,(1:8)/15)
quantile(mt2,(1:10)/15)
quantile(mt2,(1:100)/15)
quantile(mt2,(1:20)/15)
quantile(mt2,(1:10)/15)
quantile(mt2,(1:10)/5)
quantile(mt2,(1:10)/10)
quantile(mt2,(1:10)/30)
quantile(mt2,(1:10)/10)
mean(mt2,trim = 0.15)
summary(mt2)
sd(mt2)
table(data = mtcars$cyl)
table(data = mtcars$cyl)
barplot(mtcar$cyl, main = '실린더수')
barplot(mtcars$cyl, main = '실린더수')
cyl2 <- table(data = mtcars$cyl)
barplot(mtcars$cyl2, main = '실린더수')
barplot(cyl2, main = '실린더수')
barplot(cyl2, main = '실린더수', las = 1)
hist(mt2, main = '중량')
mt3 <- table(mt2)
hist(mt3, main = '중량')
hist(mt2, main = '중량')
hist(mt2, main = '중량', las = 1)
boxplot(mt2, main = '중량표', las=1)
hist(mt2, main = '중량', las = 1)
boxplot(mt2, main = '중량표', las=1)
boxplot(mt2, main = '중량표', las=1,
ylab = '중량')
boxplot(mt2, main = 'mtcars 중량표', las=1,
ylab = '중량')
mtcars[1,'wt']
mtcars[c(),'wt']
mtcars[,'wt']
mtcars
boxplot(mt2, main = 'mtcars 중량표', las=1,
ylab = '중량')
disp2 <- mtcars[,'disp']
disp2
boxplot(disp2, main = 'mtcars의 배기량', las=1,
ylab = 'ㅇㅇ')
hist(mt2, main = '중량', las = 1)
barplot(cyl2, main = '실린더수', las = 1)
cyl2
barplot(cyl2, main = '각 실린더의 도수분포표', las = 1,
xlab = 'x 개의 실린더')
boxplot(disp2, main = 'mtcars의 배기량', las=1,
ylab = 'hit')
par(mfrow = c(1,3)) # 화면분할
boxplot(disp2, main = 'mtcars의 배기량', las=1,
ylab = 'hit')
par(mfrow = c(1,2)) # 화면분할
boxplot(mt2, main = 'mtcars 중량표', las=1,
ylab = '중량')
boxplot(mtcars$mpg, main = 'mtcars mpg', las=1,
ylab = '연비')
boxplot(mt2, main = 'mtcars 중량표', las=1,
xlab = '중량')
boxplot(mtcars$mpg, main = 'mtcars mpg', las=1,
xlab = '연비')
par(mfrow = c(1,2)) # 화면분할
boxplot(mt2, main = 'mtcars 중량표', las=1,
xlab = '중량')
boxplot(mtcars$mpg, main = 'mtcars 연비표', las=1,
xlab = '연비')
par(mfrow = c(1,2)) # 화면분할
boxplot(disp2, main = 'mtcars의 배기량', las=1,
xlab = '배기량')
boxplot(mtcars$cyl, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
boxplot(cyl2, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
boxplot(disp2, main = 'mtcars의 배기량', las=1,
xlab = '배기량')
boxplot(cyl2, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
cyl2 <- table(data = mtcars$cyl)
boxplot(disp2, main = 'mtcars의 배기량', las=1,
xlab = '배기량')
boxplot(cyl2, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
cyl2 <- table(mtcars$cyl)
cyl2
boxplot(cyl2, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
boxplot(disp2, main = 'mtcars의 배기량', las=1,
xlab = '배기량')
boxplot(cyl2, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
cyl2
disp2
boxplot(disp2, main = 'mtcars의 배기량', las=1,
xlab = '배기량')
boxplot(cyl2, main = 'mtcars의 실린더', las=1,
xlab = '실린더')
par(mfrow = c(1,1)) # 화면분할
boxplot(disp2, main = 'mtcars의 배기량', las=1,
xlab = '배기량')
boxplot.stats(disp2)
boxplot(mt2, main = 'mtcars 중량표', las=1,
xlab = '중량')
boxplot.stats(mt2)
gear2 <- table(mtcars$gear)
gear2
boxplot(gear3, main = '기어 3개', las = 1)
gear3 <- table(mtcars$gear==3)
gear4 <- table(mtcars$gear==4)
gear5 <- table(mtcars$gear==5)
boxplot(gear3, main = '기어 3개', las = 1)
gear3
gear4
gear5
table(gear3)
gear3 <- table(mtcars$gear) == 4
gear3
gear3 <- table(mtcars$gear,mtcars$mpg)
gear3
gear3 <- table(mtcars$gear~mtcars$mpg)
table(mtcars$gear~mtcars$mpg)
gear3
gear3 <- mtcars[,"gear"]
gear3
gear1 <- mtcars[,"gear"]
gear1
table(gear1)
boxplot(gear1, main = '기어 3개', las = 1)
boxplot(table(gear1), main = '기어 3개', las = 1)
boxplot(g1, main = '기어 3개', las = 1)
g1<- table(gear1)
boxplot(g1, main = '기어 3개', las = 1)
g1
g1
boxplot(g1, main = '기어 3개', las = 1)
g1<- table(gear1)
g1
barplot(g1, main = 'dd')
gear1 <- mtcars[,"gear"]
gear1
boxplot(gear1, main = '기어 3개', las = 1)
gear1 <- mtcars$gear
gear1
gear1 <- mtcars$gear==3
gear1
boxplot(gear1, main = '기어 3개', las = 1)
gear1 <- mtcars$gear
gear1
par(mfrow = c(1,3)) # 화면분할
boxplot(15, main = '기어 3개', las = 1)
boxplot(12, main = '기어 3개', las = 1)
boxplot(5, main = '기어 3개', las = 1)
gear1 <- mtcars$gear=3
gear1 <- mtcars$gear==3
gear1
gear1 <- mtcars$gear
gear1
table(gear1)
boxplot(gear1, main = '기어 3개', las = 1)
boxplot(gear ~ mpg,
data = mtcars,
main = '품종별 꽃잎의 길이',
las=1)
par(mfrow = c(1,1)) # 화면분할
boxplot(gear ~ mpg,
data = mtcars,
main = '품종별 꽃잎의 길이',
las=1)
boxplot(mpg~gear,
data = mtcars,
main = '품종별 꽃잎의 길이',
las=1)
mtcars
boxplot(mpg~gear,
data = mtcars,
main = 'Gear의 그룹정보와 연비',
las=1)
summary(mtcars$mpg)
summary(mtcars$gear)
summary(mtcars$gear==3)
summary(mtcars$gear==4)
summary(mtcars$gear==5)
summary(mtcars)
summary(mtcars$gear==3)
summary(mtcars$gear==4)
summary(mtcars$gear==5)
summary(mtcars$gear[mtcars$gear ==3])
summary(mtcars$mpg[mtcars$gear ==3])
summary(mtcars$mpg[mtcars$gear ==3])
summary(mtcars$mpg[mtcars$gear ==4])
summary(mtcars$mpg[mtcars$gear ==5])
trees
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 4)
cor(trees)
boxplot(trees, main = ' 상관관계 ')
boxplot(trees$Girth~trees$Volume, data = trees, main = ' 상관관계 ')
boxplot(trees$Volume~trees$Girth, data = trees, main = ' 상관관계 ')
boxplot(tree1, main = ' 상관관계 ', las = 1)
tree_1 <- trees[,c('Height','Girth')]
boxplot(tree1, main = ' 상관관계 ', las = 1)
boxplot(tree_1, main = ' 상관관계 ', las = 1)
ca <- lm(trees$Height~trees$Volume)
ca
abline(ca)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 4)
cor(trees)
abline(ca)
pairs(trees,
cex = 1.5, main = "지름과 높이와 무게의 상관관계", pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 4)
cor(trees)
par(mfrow = c(2,3))
for (i in 1:5) {
hist(myds[,i], main = colnames(myds)[i],
col = 'yellow')
}
barplot(table(grp) , main = 'grp')
par(mfrow = c(1,1))
myds <- BostonHousing[ , c( 'crim',
'rm',
'dis',
'tax',
'medv')]
myds[,'tax']
library(mlbench)
myds <- BostonHousing[ , c( 'crim',
'rm',
'dis',
'tax',
'medv')]
myds[,'tax']
head(BostonHousing)
tail(BostonHousing)
install.packages("mlbench")
library(mlbench)
install.packages("mlbench")
library(mlbench)
class(BostonHousing)
str(BostonHousing)
library(rJava)
library(xlsx)
library(xlsxjars)
str(BostonHousing)
data("BostonHousing")
class(BostonHousing)
dim(BostonHousing)
str(BostonHousing)
head(BostonHousing)
tail(BostonHousing)
myds <- BostonHousing[ , c( 'crim',
'rm',
'dis',
'tax',
'medv')]
myds[,'tax']
pairs(myds[, -6])
point <- as.integer(myds$grp)
color <- c('red','green','blue')
pairs(myds[,-6], pch = point,
col = color[point])
point <- as.integer(myds$grp)
color <- c('red','green','blue')
pairs(myds[,-6], pch = point,
col = color[point])
grp <- c()
for ( i in 1:nrow(myds)) {
if (myds$medv[i] >= 25.0) {
grp[i] <- 'H'
} else if( myds$medv[i] <= 17.0) {
grp[i] <- 'L'
} else  {
grp[i] <- 'M'
}
}
grp
grp <- factor(grp)
grp <- factor(grp, levels = c('H','M',"L"))
myds <- data.frame(myds, grp)
head(myds)
point <- as.integer(myds$grp)
color <- c('red','green','blue')
pairs(myds[,-6], pch = point,
col = color[point])
myds
pairs(myds, pch = point,
col = color[point])
point <- as.integer(myds$grp)
color <- c('red','green','blue')
pairs(myds, pch = point,
col = color[point])
pairs(myds[,-6], pch = point,
col = color[point])
