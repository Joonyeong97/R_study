require(VIM)
library(dplyr)
car %>% filter(geer == 3)
car <- data.frame(mtcars)
car %>% filter(geer == 3)
car
car %>% filter(gear == 3)
car %>% filter(gear == 3 & gear == 5)
car %>% filter(gear == 3 | gear == 5)
mt.gear.35 <- car %>% filter(gear == 3 | gear == 5)
mt.gear.35
car %>% filter(wt >=1.5 & wt <= 3.0)
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
authors
books
left_join(authors,books)
z <- merge(authors,books,by =c('surname'))
z <- merge(authors,books,by.authors =c('surname'),
by.books = c('name'))
z
z
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(name = c('a','b','d'),
korean = c(75,60,90))
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(sname = c('a','b','d'),
korean = c(75,60,90))
merge( x, y, by.x = c("name"),
by.y = c("sname") )
z <- merge(authors,books,by.authors =c("surname"),
by.books = c("name"))
z
z <- merge(authors,books,by.x =c("surname"),
by.y = c("name"))
z
df2 <- data.frame(id= c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
df3 <- data.frame(id= c(1,2,3,4,5),
final = c(60,80,70,90,85))
df_left <- left_join(df2,df3, by = 'id')
df_left
df_inner <- inner_join(df2,df3, by = 'id')
df_inner
df2 <- data.frame(id = c(1,2,3),
address = c('서울', '부산', '제주'),
stringsAsFactors = F)
df3 <- data.frame(id = c(1,2,4),
gender = c('남', '여', '남'))
df_left <- left_join(df2,df3, by = 'id')
df_left
df_inner <- inner_join(df2,df3, by = 'id')
df_inner
df_full <- full_join(df2,df3,by='id')
df_full
df2
df_left <- left_join(df2,df3, by = 'id')
df_left
df_inner
z1 <- left_join(authors,books,by.x =c("surname"),
by.y = c("name"))
z1 <- left_join(authors,books,by =c("surname"),
by = c("name"))
z1 <- left_join(authors,books,by.authors =c("surname"),
by.books = c("name"))
merge( x, y, by.x = c("name"),
by.y = c("sname") )
merge(x,y, all.x = T)
z1 <- merge(authors,books,by =c("surname"),
by = c("name"),
all.x = T)
z1 <- merge(authors,books,by.x =c("surname"),
by.y = c("name"),
all.x = T)
z1
authors
z2 <- merge(authors,books,by.x =c("surname"),
by.y = c("name"),
all.y = T)
z2
books
z3 <- merge(authors,books,by.x =c("surname"),
by.y = c("other.author"))
z3
z3 <- merge(authors,books,by.x =c("surname"),
by.y = c("other.author"),
all = T)
z3
library(treemap)
treemap(GNI2014,
index = c("continent","iso3"), # 계층 구조
vSize = "population",          # 타일 크기 size
vColor = "GNI" ,               # 타일 컬러
type = "value",                # 타일 컬러링 방법
bg.labels = "yellow",          # 레이블 배경색
title = "Worlds GNI" )
data(GNI2014)
treemap(GNI2014,
index = c("continent","iso3"), # 계층 구조
vSize = "population",          # 타일 크기 size
vColor = "GNI" ,               # 타일 컬러
type = "value",                # 타일 컬러링 방법
bg.labels = "yellow",          # 레이블 배경색
title = "Worlds GNI" )         # 제목
install.packages(c("ggmap", "Rtsne"))
library(Rtsne)
library(ggplot2)
library(ggmap)
# 1번
register_google( key = 'AIzaSyDlmljbgzrqBC-ug1Mr1Q1Y4gvEOkOcR_g')
gc <- geocode(enc2utf8("서울시청"))
cen <- as.numeric(gc)
map <- get_googlemap(center = cen ,       # 지도 중심점 좌표
zoom = 15,           # 지도 확대 정도
size = c(600,600),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map)
gc1 <- geocode(enc2utf8("금강산"))
cen1 <- as.numeric(gc1)
map <- get_googlemap(center = cen1 ,       # 지도 중심점 좌표
zoom = 8,           # 지도 확대 정도
size = c(500,500),   # 지도 크기
maptype = "hybrid") # 지도 유형
ggmap(map)
gc2 <- geocode(enc2utf8("강남역"))
cen2 <- as.numeric(gc2)
map <- get_googlemap(center = cen2 ,       # 지도 중심점 좌표
zoom = 16,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map)
gc2 <- geocode(enc2utf8("강남역"))
cen2 <- as.numeric(gc2)
map2 <- get_googlemap(center = cen2 ,       # 지도 중심점 좌표
zoom = 16,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map2)
gc1 <- geocode(enc2utf8("금강산"))
cen1 <- as.numeric(gc1)
map1 <- get_googlemap(center = cen1 ,       # 지도 중심점 좌표
zoom = 8,           # 지도 확대 정도
size = c(500,500),   # 지도 크기
maptype = "hybrid") # 지도 유형
ggmap(map1)
gc2 <- geocode(enc2utf8("강남역"))
cen2 <- as.numeric(gc2)
map2 <- get_googlemap(center = cen2 ,       # 지도 중심점 좌표
zoom = 16,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map2)
gc2 <- geocode(enc2utf8("강남역"))
cen2 <- as.numeric(gc2)
map2 <- get_googlemap(center = cen2 ,       # 지도 중심점 좌표
zoom = 13,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map2)
map3 <- get_googlemap(center = c(127.397692,36.337058) ,       # 지도 중심점 좌표
zoom = 9,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map3)
map4 <- get_googlemap(center = c(135.502330,34.693594) ,       # 지도 중심점 좌표
zoom = 10,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map4)
ggmap(map4)
ggmap(map3)
names1 <- c("강서구청", "동작구청", "강남구청",
"광진구청", "송파구청")
cc1 <- c("강서구청","동작구청","강남구청","광진구청","송파구청")
gc1 <- geocode(enc2utf8(cc1))
gc1
gc2 <- data.frame(name = names1 ,gc1)
cen <- c(mean(gc1$lon), mean(gc1$lat))
map <- get_googlemap(center = cen ,       # 지도 중심점 좌표
zoom = 11,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap", # 지도 유형
markers = gc1)       # 마커
map5 <- get_googlemap(center = cen ,       # 지도 중심점 좌표
zoom = 11,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap", # 지도 유형
markers = gc1)       # 마커
ggmap(map5)
ggmap(map5)
gmap <- ggmap(map5)
gmap +
geom_text(data = gc2,
aes(
x = lon, y = lat
),
size = 5,
label = gc2$name)
name1 <- c("부산광역시","대구광역시","인천광역시","대전광역시","광주광역시","울산광역시")
ccz <- geocode(enc2utf8(name1))
cczname <- data.frame(name1,ccz)
cczname
cen <- c(mean(ccz$lon), mean(ccz$lat))
map1 <- get_googlemap(center = cen,
zoom = 7,
size = c(640,640),
maptype = "roadmap",
markers = ccz)
gmap2 <- ggmap(map1)
gmap2 +
geom_text(data = cczname,
aes(x = lon, y = lat),
size = 7 ,
label = cczname$name1)
name2 <- c("북한산 국립공원", "설악산 국립공원", "태백산 국립공원", "오대산 국립공원", "치악산 국립공원")
str(name2)
ccz1 <- geocode(enc2utf8(name2))
cczname1 <- data.frame(name2,ccz1)
cczname1
cen <- c(mean(ccz1$lon), mean(ccz1$lat))
map1 <- get_googlemap(center = cen,
zoom = 8,
size = c(640,640),
maptype = "roadmap",
markers = ccz1)
gmap2 <- ggmap(map1)
gmap2 +
geom_text(data = cczname1,
aes(x = lon, y = lat),
size = 5 ,
label = cczname1$name2)
setwd("C:/Users/82105/Desktop/빅데이터교육/r/lyt09/문제")
pil <- read.csv("Report.csv")
str(pil)
asda <- pil[,'시군구']
str(asda)
xxx <- as.character(asda)
str(xxx)
zz11 <- geocode(enc2utf8(xxx))
cennam1 <-data.frame(zz11,pil)
cen <- c(mean(cennam$lon), mean(cennam$lat))
cen <- c(mean(cennam1$lon), mean(cennam1$lat))
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 11)
gmap <- ggmap(map)
gmap +
geom_point(data = cennam1,
aes(x = lon, y= lat , size = cennam1$X2018),
alpha = 0.5, col = "blue") +
scale_size_continuous(range = c(1,14))
jeju <- read.csv("jeju.csv")
si <- jeju[,'시군구']
char1 <- as.character(si)
xy <- geocode(enc2utf8(char1))
jejuxy <- data.frame(xy,jeju)
cen1 <- c(mean(xy$lon), mean(xy$lat))
map <- get_googlemap(center = cen1 ,
maptype = "roadmap",
zoom = 11)
gmap <- ggmap(map)
gmap +
geom_point(data = jejuxy,
aes(x = lon, y= lat , size = jejuxy$X2018),
alpha = 0.5, col = "blue") +
scale_size_continuous(range = c(6,14))
jejuxy
xy
install.packages(c("devtools", "ggiraphExtra", "mapproj", "rgl"))
str(mtcars)
head(mtcars)
mosaicplot(~gear + vs,    # 대상 변수 ~다음이 X축 + 다음이 Y축
data = mtcars, # 데이터셋
color = T,     # y축 변수의 그룹별 음영 다르게 표시
main = "Gear and Vs") # 제목
mosaicplot(~gear + vs, data = mtcars,
color = c('green','blue'),
main = "Gear and vs")
library(Rtsne)
library(ggplot2)
ds <- iris[,-5]
# 차원축소
# 중복 데이터 제거
dup = which(duplicated(ds)) # 중복데이터 찾는 함수 duplicated
dup
ds <- ds[-dup,]             # 중복데이터 제거
ds.y <- iris$Species[-dup]  # 품종별에도 중복데이터 행을 삭제.
# 차원 축소 수행 -t -SNE 실행
tsne <- Rtsne(ds,               # 차원 축소 대상 데이터 셋
dim = 2,          # 축소할 차원 2/3차원
perplexity = 10 ) # 차원 축소 과정에서
# 데이터 샘플링을 수행하는데
# 샘플의 갯수
# (대상데이터수) / 3 보다 작게 정의
tsne <- Rtsne(ds, dim = 2, perplexity = 10 )
# 차원축소 결과 시각화
# 2차원으로 표시
df.tens <- data.frame(tsne$Y)
head(df.tens)
ggplot(df.tens, aes(x = X1, y = X2, color = ds.y)) +
geom_point( size = 2 )
library(car)
library(rgl)
library(mgcv)
# 3차원으로 표시
tsne <- Rtsne(ds , dims = 3, perplexity = 10)
df.tsne <- data.frame(tsne$Y)
head(df.tsne)
scatter3d(x = df.tsne$X1, y = df.tsne$X2,
z= df.tsne$X3)
# 3차원으로 표시
points <- as.integer(ds.y)
color <- c('red', 'green', 'blue')
scatter3d(x = df.tsne$X1, y = df.tsne$X2,
z = df.tsne$X3,
point.col = color[points],
surface = F)
# 지도 표시
map <- get_googlemap(center = c(126.569879,33.452409))
ggmap(map)
# 지도 표시
map <- get_googlemap(center = gc)
ggmap(map)
gc <- geocode(enc2utf8("한라산"))
cen <- as.numeric(gc)
map <- get_googlemap(center = cen ,       # 지도 중심점 좌표
zoom = 10,           # 지도 확대 정도
size = c(640,640),   # 지도 크기
maptype = "roadmap") # 지도 유형
ggmap(map)
cen <- c(126.561099, 33.253077)
map <- get_googlemap(center = cen,
zoom = 15,
maptype = "roadmap")
ggmap(map)
names <- c("용두암", "성산일출봉", "정방폭포",
"중문관광단지", "한라산1100고지", "차귀도")
addr <- c("제주시 용두암길 15",
"서귀포시 성산읍 성산리",
"서귀포시 동홍동 299-3",
"서귀포시 중문동 2624-1",
"서귀포시 색달동 산 1-2",
"제주시 한경면 고산리 125")
gc <- geocode(enc2utf8(addr))
gc
# 관광지 명칭과 좌표값으로 Data Frame 생성
df <- data.frame(name = names, lon = gc$lon,
lat = gc$lat)
df
cen <- c(mean(df$lon), mean(df$lat))
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 10,
size = c(640,640),
marker = gc)
ggmap(map)
# 지도에 관광지 이름 추가
gmap <- ggmap(map)
gmap +
geom_text(data = df,
aes(
x = df$lon, y = df$lat
),
size = 5,
label = df$name)
# 지도에 데이터 표시
dim(wind)
str(wind)
sp <- sample(1:nrow(wind), 50)
df <- wind[sp, ]
head(df)
cen <- c(mean(df$lon), mean(df$lat))
gc <- data.frame(lon = df$lon, lat = df$lat)
head(gc)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6,
marker = gc)
ggmap(map)
map <- get_googlemap(center = cen,
maptype = "roadmap",
zoom = 6)
gmap <- ggmap(map)
gmap+
geom_point(data = df,
aes(x = lon, y = lat, size = spd),
alpha = 0.5, col = "blue") +
scale_size_continuous(range = c(1,14)) # 원크기 조절
# 단계 구분도
install.packages("ggiraphExtra")
library(ggiraphExtra)
dim(USArrests)
str(USArrests)
head(USArrests)
library(tibble)
crime <- rownames_to_column(USArrests, var = "state")
crime$state <- tolower(crime$state)
str(crime)
library(ggplot2)
install.packages("mapproj")
library(mapproj)
state_map <- map_data("state")
str(state_map)
ggChoropleth(data =crime,
aes(fill = Murder,
map_id = state),
map = state_map)
install.packages(c("devtools", "ggiraphExtra"))
#***** 필요시 설치 **
install.packages( "ggiraphExtra" ) # 단계구분도를 위한 Package
library( ggiraphExtra )
# 미국 주별 data set
dim( USArrests )
str( USArrests )
head( USArrests )
library( tibble )
# USArrests data set에 지역명 변수가 따로 없고, 대신 행이름이
# 지역명으로 되어있음
# tibble package의 rownames_to_column()를 이용해서 행 이름을
# state 변수로 바꿔서 data frame 생성
crime <- rownames_to_column( USArrests, var = "state" )
crime$state <- tolower( crime$state ) # 소문자로 수정
str( crime )
install.packages( "mapproj" )
library( mapproj )
state_map <- map_data( "state" ) # ggplot2의 map_data()를 이용 data frame 생성
library( mapproj )
state_map <- map_data( "state" ) # ggplot2의 map_data()를 이용 data frame 생성
str( state_map )
library( ggplot2 )
state_map <- map_data( "state" ) # ggplot2의 map_data()를 이용 data frame 생성
str( state_map )
# ggiraphExtra package에 포함된 단계구분도 작성 함수
ggChoropleth( data = crime,
aes( fill = Murder,
map_id = state ),
map = state_map,
interactive = F )
ggChoropleth( data = crime,
aes( fill = Murder,
map_id = state ),
map = state_map,
interactive = T ) # interactive를 T로 하면 지도위에
#***** 필요시 설치 **
install.packages( "stringi" )
install.packages( "devtools")
#***** 필요시 설치 **
devtools::install_github( "cardiomoon/kormaps2014" )
devtools::install_github( "cardiomoon/moonBook2" )
library( ggplot2 )
library( dplyr )
library( stringi )
library( ggiraphExtra )
library( kormaps2014 )
library( moonBook2 )
str( changeCode( areacode ) ) # kormaps2014 package의 changeCode()는
str( changeCode( kormap1 ) )  # encoding을 cp949로 변환
str( changeCode( korpop1 ) )
str( changeCode( kormap2 ) )
str( changeCode( korpop2 ) )
str( changeCode( kormap3 ) )
str( changeCode( korpop3 ) )
# 2015년도 시도별 인구분포 단계구분도
ggplot( korpop1, aes( map_id = code, fill = 총인구_명 ) ) +
geom_map( map = kormap1, colour = "black", size = 0.1 )+
expand_limits( x = kormap1$long, y = kormap2$lat ) +
scale_fill_gradientn( colours = c( 'white', 'orange', 'red' ) ) +
ggtitle( "2015년도 시도별 인구분포도" ) +
coord_map()
# ggChoropleth()이용 단계 구분도
ggChoropleth( korpop2, kormap2, fillvar = "남자_명" )
ggChoropleth( korpop3, kormap3, fillvar= "주택_계_호" )
# subarea 인수를 이용한 특정지역 표시 - Error
ggChoropleth( korpop3, kormap3, fillvar= "총인구_명",
subarea = c( "전라", "광주" ) )
# subarea 인수를 이용한 특정지역 표시 - Error
ggChoropleth( korpop3, kormap3, fillvar= "총인구_명",
subarea = c( "전라", "광주" ) )
# ggChoropleth()이용 interactive plot
ggChoropleth( korpop2, kormap2, fillvar="남자_명",
interactive = TRUE )
# Error
ggChoropleth( korpop3, kormap3, fillvar="남자_명",
interactive = TRUE,
subarea = c( "전라","광주" ),
tooltip = "행정구역별_읍면동" )
# 결핵신환 발생 데이터 tbc - 국가통계포털( kosis.kr ) 제공
dim( tbc )
str( changeCode( tbc ) )
tbc.sub <- tbc[ tbc$year %in% c( 2001, 2005, 2010, 2015 ), ]
# 년도별로 면 분활된 단계구분도
ggChoropleth( tbc.sub, kormap1, fillvar = "NewPts",
facetvar = "year",
tooltip = "name",
interactive = TRUE ) # 한글 깨짐
