#
# day12_answer.R
#
# 워드클라우드 실습
#
#문1)
#20대 국회 개원 여·야 3당 대표 국회연설문에 대해 각각 워드클라우드를
#작성하시오.
#예제소스 파일은 ‘ex_10-1.txt’, ‘ex_10-2.txt’, ‘ex_10-3.txt’이다.
Sys.setenv( JAVA_HOME = 'C:/Program Files/Java/jre1.8.0_231' )
library( wordcloud )
library( KoNLP )
library( RColorBrewer )
setwd("D:/lyt09/문제/1211")
# ex_10-1.txt
text <- readLines( "ex_10-1.txt", encoding ="UTF-8" )
text
buildDictionary( ext_dic = "woorimalsam" )
noun <- sapply( text, extractNoun, USE.NAMES = F )
noun
noun2 <- unlist(noun)
# 무의미한 단어 제거
noun2 <- noun2[ nchar(noun2) > 1 ]
noun2 <- gsub( "들이", "", noun2 )
noun2 <- gsub( "10", "", noun2 )
noun2 <- gsub( "이명", "", noun2 )
wordcount <- table( noun2 )
wordcloud2( wordcount,
size = 1.2, color = rep_len( c( 'red', 'steelblue'),
nrow( wordcount ) ),
shape = 'diamond' )
library( wordcloud2 )
wordcloud2( wordcount,
size = 1.2, color = rep_len( c( 'red', 'steelblue'),
nrow( wordcount ) ),
shape = 'diamond' )
wordcloud2( wordcount,
size = 1.2, color = rep_len( c( 'red', 'steelblue'),
nrow( wordcount ) ),
shape = 'diamond' )
# ex_10-2.txt
useSejongDic()
text <- readLines( "ex_10-2.txt", encoding ="UTF-8" )
text
noun <- sapply( text, extractNoun, USE.NAMES = F )
noun
# 단어 등록
add_words <- c( '새누리당', '부패', '비정상', '김영란법',
'원장님', '북한', '북한당국', '사드', '배치' )
buildDictionary( user_dic =
data.frame( add_words,rep( 'ncn', length( add_words ) ) ),
replace_usr_dic = T )
get_dictionary( 'user_dic' )
noun <- sapply( text, extractNoun, USE.NAMES = F )
noun
noun2 <- unlist(noun)
# 무의미한 단어 제거
noun2 <- noun2[ nchar(noun2) > 1 ]
del_words <- c( "누구", "하지", "이명", "여러분", "동지",
"발걸음", "시행", "입장", "심각", "상황",
"해서", "적극", "앞장", "보완", "진행",
"불구", "사실상" )
for ( str in del_words ) {
noun2 <- gsub( str, "", noun2 )
}
wordcount <- table( noun2 )
wordcloud2( wordcount,
size = 1.2, color = rep_len( c( 'red', 'steelblue'),
nrow( wordcount ) ),
shape = 'triangle' )
# ex_10-3.txt
text <- readLines( "ex_10-3.txt", encoding ="UTF-8" )
text
noun <- sapply( text, extractNoun, USE.NAMES = F )
noun
noun2 <- unlist(noun)
# 무의미한 단어 제거
noun2 <- noun2[ nchar(noun2) > 1 ]
del_words <- c( "누구", "하지", "이명", "여러분", "동지",
"발걸음", "시행", "입장", "심각", "상황",
"해서", "적극", "앞장", "보완", "진행",
"불구", "사실상" )
for ( str in del_words ) {
noun2 <- gsub( str, "", noun2 )
}
wordcount <- table( noun2 )
wordcloud2( wordcount,
size = 1.2, color = rep_len( c( 'red', 'steelblue'),
nrow( wordcount ) ),
backgroundColor = 'black',
shape = 'pentagon' )
#문2)
#스티브 잡스의 스탠포드 대학 졸업식 연설문에 대해 워드클라우드를 작성
#하시오.
#Tip. 예제소스 파일은 ‘ex_10-4.txt’이다.
useNIADic()
text <- readLines( "ex_10-4.txt", encoding = "UTF-8" )
text
noun <- sapply( text, extractNoun, USE.NAMES = F )
noun
noun2 <- unlist(noun)
noun2 <- noun2[ nchar(noun2) > 1 ]
wordcount <- table( noun2 )
wordcloud2( wordcount,
color = rep_len( c( 'red', 'blue'),
nrow( wordcount ) ),
minRotation = -pi / 6,
maxRotation = -pi / 6,
rotateRatio = 1 )
pal2 <- brewer.pal( 9, 'Blues' )[ 5:9 ]
text <- readLines( "ex_10-5.txt", encoding ="UTF-8" )
text
noun <- sapply( text, extractNoun, USE.NAMES = F )
noun
noun2 <- unlist( noun )
noun2 <- noun2[ nchar( noun2 ) > 1 ]
noun2 <- gsub( "들이", "", noun2 )
wordcount <- table( noun2 )
wordcloud( names( wordcount ),
freq = wordcount,
scale = c( 6, 0.7 ),
min.freq = 3,
random.order = T,
rot.per = .1,
colors = pal2 )
# 주행거리와 제동거리 사이의 회귀모델
str(cars)
head(cars)
# 산점도를 통한 선형 관계 확인
plot(dist~speed, data = cars)
# 산점도를 통한 선형 관계 확인
plot(dist~speed, data = cars)
plot(cars)
# 회귀모델 구하기
# 종속(반응)변수~독립(설명)변수 순서로 지정
model <- lm(dist~speed, cars)
model
abline(model)
head(cars)
#
# y = Wx + b
# y =dist , x = speed
# 주행거리와 제동거리 사이의 회귀모델
str(cars)
coef(model) # 매개변수 (계수) - w, b값 출력
fitted(model) # 훈련 data에 있는 샘플에 해닿ㄴ
residuals(model)
diviance(model) / length(speed)
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값
residuals(model) # 잔차 : 회귀식으로 추정된 값과의 차이
# 잔차 제곱합을 평균제곱오차(MES- mean squared error)로 변환
deviance(model) / length(speed)
# 잔차 제곱합을 평균제곱오차(MES- mean squared error)로 변환
deviance(model) / length(speed)
# 잔차 제곱합을 평균제곱오차(MES- mean squared error)로 변환
deviance(model) / length(cars$speed)
coef(model) # 매개변수 (계수) - w, b값 출력
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값
residuals(model) # 잔차 : 회귀식으로 추정된 값과의 차이
# 잔차 제곱합을 평균제곱오차(MES- mean squared error)로 변환
deviance(model) / length(cars$speed)
cars
residuals(model) # 잔차 : 회귀식으로 추정된 값과의 차이
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값
residuals(model) # 잔차 : 회귀식으로 추정된 값과의 차이
# 잔차 제곱합을 평균제곱오차(MES- mean squared error)로 변환
deviance(model) / length(cars$speed)
coef(model) # 매개변수 (계수) - w, b값 출력
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값
b <- coef(model)[1]
W <- coef(model)[2]
speed <- 21.5
dist <- W * speed + b
dist
b
W
df <- data.frame(speed = c(21.5,25.0,25.5,26.0,
26.5,27.0,27.5,28.0))
predict(model, df)
plot(df$speed, predict(model, df), col = 'red',
cex = 2, pch = 20)
abline(model)
model
predict(model, df)
coef(model) # 매개변수 (계수) - w, b값 출력
lm(dist~speed, cars)
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값 회귀선의 값
predict(model, df)
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값 회귀선의 값
# 산점도를 통한 선형 관계 확인
plot(dist~speed, data = cars)
abline(model)
fitted(model) # 훈련 data에 있는 샘플에 대한 예측값 회귀선의 값
cars
# 훈련 data에 있는 샘플에 대한 예측값 회귀선의 값
fitted(model)
# 잔차 : 회귀식으로 추정된 값과의 차이
residuals(model)
# 잔차 제곱합을 평균제곱오차(MES- mean squared error)로 변환
deviance(model) / length(cars$speed)
predict(model, df)
predict(model, df)
speed <- cars[, 1]
pred <- W * speed + b
pred
coef(model)[1]
pred
compare <- data.frame(pred, cars[,2],
pred-cars[,2])
compare
colnames(compare) <- c('예상','실제','오차')
compare
head(fitted(model),3)   # 예상
head(residuals(model),3) # 추정된 값과의 차이
head(compare, 3)
summary(model)
str(cars)
hear(cars)
str(cars)
hear(cars)
car_model <- lm(dist~speed, data =cars)
coef(car_model)
plot(car_model); abline(car_model, col = 'red')
summary(car_model)
women_model <- lm(weights~height, data = women)
str(women)
hear(women)
women_model <- lm(weights~height, data = women)
women_model <- lm(weights~height, data = women)
plot(car_model)
women_model <- lm(weights~height, data = women)
women_model <- lm(weight~height, data = women)
coef(women_model)
plot(women_model); abline(women_model, col = 'red')
women_model <- lm(weight~height, data = women)
coef(women_model)
plot(women_model)
hear(cars)
head(women)
women_model <- lm(weight~height, data = women)
coef(women_model)
plot(women_model)
abline(women_model, col = 'red')
abline(women_model, col = 'red')
summary(women_model)
plot(women_model)
abline(women_model, col = 'red')
plot(car_model)
abline(car_model, col = 'red')
summary(car_model)
women_model <- lm(weight~height, data = women)
coef(women_model)
plot(women_model)
women
summary(women_model)
summary(car_model)
summary(women_model)
plot(women_model)
# Coefficients:
#             Estimate Std. Error  t value  Pr(>|t|)
st <- data.frame(stat.x77)
st <- data.frame(state.x77)
str(st)
head(st)
plot(Muder~Illiteracy, data = st)
plot(Murder~Illiteracy, data = st)
gz <- lm(Murder~Illiteracy, data = st)
gz
gz
plot(gz)
#문2)
#trees 데이터셋에서 나무둘레(Girth)로 나무의 볼륨(Volume)을 예측하는 단
#선형 회귀모델을 만드시오. 그리고 나무 둘레가 8.5, 9.0, 9.5일 때, 나무의
abline(gz)
plot(gz)
abline(gz)
munmang <- c(0.5,1.0,1.5)
predict(gz, munmang)
munmang <- data.frame(Illiteracy = c(0.5,1.0,1.5))
predict(gz, munmang)
plot(munmang$Illiteracy ,predict(gz, munmang), col = 'red' )
abline(gz)
mmpr <- predict(gz, munmang)
plot(munmang$Illiteracy ,mmpr, col = 'red' )
abline(gz)
plot(munmang$Illiteracy , mmpr, col = 'red' ,
cex = 2, pch = 20)
abline(gz)
tr <- data.frame(trees)
str(tr)
head(tr)
plot(tr$Girth,tr$Volume)
trgz <- lm(tr$Girth,tr$Volume)
trgz <- lm(Volume~Girth , data = tr)
abline(trgz)
gi <- data.frame(c(8.5,9.0,9.5))
gigz <- predict(trgz,gi)
gi <- data.frame(Girth = c(8.5,9.0,9.5))
gigz <- predict(trgz,gi)
plot(gi, gigz)
plot(gi, gigz)
plot(gi$Girth, gigz)
plot(gi$Girth, gigz, col = 'red',
cex = 2, pch = 20)
abline(trgz)
pr <- data.frame(pressure)
pr
head(pr)
plot(pr$temperature,pr$pressure)
pr2 <- lm(pressure~temperature , data = pr)
abline(pr2)
prgz <- data.frame(temperature = c(65,95,155))
prgz2 <- predict(prgz,pr2)
prgz2 <- predict(pr2,prgz)
plot(prgz$temperature, prgz2, col = 'red',
cex = 2, pch = 20)
abline(prgz2)
abline(pr2)
