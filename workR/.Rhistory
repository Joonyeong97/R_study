as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
# Factor 형
bt <- c('A','B','C','O','AB','A')
bt.new <- factor(bt)
bt # 문자형 자료 6개 출력
bt.new  # 팩터 함수사용
bt[5] # 5번째 단어 출력
bt.new[5] # 5번째 단어 출력
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
bt <- c('A','B','B','O','AB','A')
bt.new <- factor(bt)
bt # 문자형 자료 6개 출력
bt.new  # 팩터 함수사용
bt[5] # 5번째 단어 출력
bt.new[5] # 5번째 단어 출력
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
d1 <- c(1:50)
d2 <- c(51:100)
d1
d2
d1+d2
d2-d1
d1*d2
d2/d1
sum(d)
sum(d1)
sum(d2)
sum(d1)+sum(d2)
mean(d2) - mean(d1)
sort(d1,decreasing = TRUE)
head(d1,10)
head(d2,10)
a1 <- head(d1,10)
a2 <- head(d2,10)
d1 <- c(1:50)
d2 <- c(51:100)
d3 <- NULL
a1 <- c()
a2 <- c()
a1 <- head(d1,10)
a2 <- head(d2,10)
a1
a2
d3 <- c(a1,a2)
d3
d3
print(c)
v1 <- c(51:90)
a1 <- NULL
print(c)
print(c)
cat(c)
cat(v1)
v1(v1<60)
v1 <- c(51:90)
a1 <- NULL
v1(v1<60)
v1 [v1<60]
sum(v1<70)
sum[v1<70]
sum(v1<70)
sum (v1[v1<65])
sum (v1[v1>65])
v1[v1>60]
v1[v1<60]
v1 [v1<60]
v1[v1>60]
v1[v1>60 | v1<73]
v1[v1>60 | v1>73]
v1[v1>60 | 73]
v1[v1>60 | 60>73]
v1[v1>60 | 60<73]
v1[v1>60 | v1>73]
v1[v1>60 & v1>73]
v1[v1>60 & v1<=73]
length(v1)
v1 [v1<60]
sum (v1<70)
sum (v1[v1>65])
v1[v1>60 & v1<=73]
v1[v1<65 | v1<80]
v1[v1<65 | v1>80]
v1[v1 / 3 == 0]
v1[v1 %% 3 == 0]
v1[v1 %% 7 == 0]
v1[v1 %% 7 == 0] <-  0
v1
sum(v1[v1 %% 2 == 0])
v1[ v1 %% 2 != 0 ]
v1[ v1 %% 2 != 0 | v1>80]
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
v1 <- c(51:90)
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
sum(v1[v1 %% 2 == 0])
v1[ v1 %% 2 != 0 | v1>80]
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
a1 <- v1[v1 %% 2 == 0] * 2
a1
v1 <- v1[v1 %% 7 == 0]
v1 <- v1[v1 %% 7 == 0]
v1
v1 <- c(51:90)
v1
v1 <- v1[v1 %% 7 == 0]
v1
v1 <- c(51:90)
v1
v1 <- v1[v1 %% 7 =! 0]
v1
v1 <- v1[v1 %% 7 != 0]
v1
v1 <- c(51:90)
v1[v1 %% 7 != 0] # 12번 문제
as <- v1[v1 %% 7 != 0] # 12번 문제
as <- v1[v1 %% 7 != 0]  # 12번 문제
as
d <- c(50:99)
d(d>60)
d(d>60)
d <- c(50:99)
d(d>60)
d
d <- c(50:99)
d[d>60]
d
sum(d<=60)
d<=60
sum(d<=60)
sum(d[60])
sum(d[10])
d[10]
v1[v1<65 | v1>80] # 5번문제
sum (v1[v1>65]) # 3번문제
v1 [v1<60] # 1번문제
sum (v1<70) # 2번문제
v1 [v1<60] # 1번문제 인덱스 내용물중 60미만인수
myfunc <- function(x,y) {
val.sum <- x+y
val.mul <- x*y
return( list(sum=val.sum, mul = val.mul))
}
result <- myfunc(5,8)
s <- result$sum
m <- result$mul
cat( '5 + 8 = ', s, '\n')
cat( '5 * 8 = ', m, '\n')
d <- c(1,2,3,4,5,6,7,8,9,10)
d[d>5] # 배열안에 5보다 큰수를 찾아라
sum(d>5) # d 안에있는 배열중에 5보다 작은수(True수) 더해라
sum(d[d>5]) # d 안에있는 d배열중에서 5보다 큰수를 더해라
# Matrix 생성
z <- matrix(1:20, nrow = 4)
z
z <- matrix(1:20, nco1 = 4)
z
z <- matrix( 1:20, nrow = 4 , nco1 = 5)
z
# Matrix 생성
z <- matrix(1:20, nrow = 4)
z
z <- matrix(1:20, ncol = 4)
z
z <- matrix( 1:20, nrow = 4 , nco1 = 5)
z
# Matrix 생성
z <- matrix(1:20, nrow = 4)
z
z <- matrix(1:20, ncol = 4)
z
z <- matrix( 1:20, nrow = 4 , ncol = 5)
z
# Matrix 생성
z <- matrix(1:21, nrow = 4)       # 행 4개 (관측치 4개)
z
z <- matrix(1:21, ncol = 4)       # 열 4개 (변수,특성 4개)
z
z <- matrix( 1:21, nrow = 4 , ncol = 5) # 행 4개, 열 5개
z
# Matrix 생성
z <- matrix(1:20, nrow = 4)       # 행 4개 (관측치 4개)
z
z <- matrix(1:20, ncol = 4)       # 열 4개 (변수,특성 4개)
z
z <- matrix( 1:20, nrow = 4 , ncol = 5) # 행 4개, 열 5개
z
z <- matrix(1:20, ncol = 4)       # 열 4개 (변수,특성 4개)
z
z <- matrix(1:20, ncol = 4)       # 열 4개 (변수,특성 4개)
z
z <- matrix(1:20, nrow = 4)
z
# Matrix 생성
z <- matrix(1:20, nrow = 1)       # 행 4개 (관측치 4개)
z
z <- matrix(1:20, ncol = 1)       # 열 4개 (변수,특성 4개)
z
z <- matrix(1:20, nrow = 4,ncol = 5,byrow = T)
z
x <- 1:4
x
y <- 5:8
y
z <- matrix(1:20, nrow = 4, ncol = 5)
z
m1 <- cbind(x,y)
m1
m2 <- rbind(x,y)
m2
m3 <- rbind(m2,x)
m3
m4 <- cbind(z,x)
m4
# Matrix 에서 Cell의 값 추출
z[2,3]
z[1,4]
z[2,]
z[4]
z[2,1:3]
z[1,c(1,2,4)]
z[1:2,]
z[, c(1,4)]
z
z[2,3]
z[1,4]
z[2,]
z[4]
z[2,1:3]
z[1,c(1,2,4)]
z[1:2,]
z[, c(1,4)]
z[,4]
z[2,]
z[,4]
z
z[2,]
z[,4]
# Matrix 에서 행/열에 이름 지정
score <- matrix( c(90,85,69,78,
85,96,49,95,
90,80,70,70),
nrow = 4, ncol = 3 )
score
rownames(score) <- c("Hong","Kim","Lee","Yoo")
colnames(score) <- c("English","Math","Science")
score
score('Hong','Math')
score('Kim', c('Math','Science') )
score('Lee',)
score( , 'English')
rownames(score)
colnames(score)
colnames(score)[2]
# Matrix 에서 행/열에 이름 지정
score <- matrix( c(90,85,69,78,
85,96,49,95,
90,80,70,70),
nrow = 4, ncol = 3 )
score
rownames(score) <- c("Hong","Kim","Lee","Yoo")
colnames(score) <- c("English","Math","Science")
score
score['Hong','Math']
score['Kim', c('Math','Science') ]
score['Lee',]
score[ , 'English']
rownames(score)
colnames(score)
colnames(score)[2]
m1 <- cbind(x,y) # x,y가 열로 진행
m1
m2 <- rbind(x,y) # x,y가 행으로 진행
m2
# Matrix 에서 행/열에 이름 지정
score <- matrix( c(90,85,69,78,
85,96,49,95,
90,80,70,70),
nrow = 4, ncol = 3 )
score
rownames(score) <- c("Hong","Kim","Lee","Yoo")
colnames(score) <- c("English","Math","Science")
score
# Data Frame 생성
city <- c("Seoul","Tokyo", "Washington")
rank <- c(1,3,2)
city.info <- data.frame(city, rank)
city.info
name <- c("Hong","Kim","Lee")
age <- c(22,20,25)
gender <-  factor(c("M","F","M") )
blood.type <-  factor(c("A","O","B") )
person.info <- data.frame(name,age,gender,blood.type)
person.info
person2.info <- data.frame( name <-  c("Hong","Kim","Lee") ,
age <- c(22,20,25) ,
gender <-  factor(c("M","F","M") ) ,
blood.type <-  factor(c("A","O","B") ) )
person2.info
person2.info <- data.frame( name2 <- c ("Hong","Kim","Lee") ,
age2 <- c (22,20,25) ,
gender2 <-  factor(c("M","F","M") ) ,
blood.type2 <-  factor(c("A","O","B") ) )
person2.info
person.info
person2.info <- data.frame( name2 = c ("Hong","Kim","Lee") ,
age2 = c (22,20,25) ,
gender2 =  factor(c("M","F","M") ) ,
blood.type2 =  factor(c("A","O","B") ) )
person2.info
name <- c("Hong","Kim","Lee")
age <- c(22,20,25)
gender <-  factor(c("M","F","M") )
blood.type <-  factor(c("A","O","B") )
person.info <- data.frame(name,age,gender,blood.type)
person.info
length(gender)
length(name)
length(age)
length(gender)
length(blood.type)
length(person.info)
city.info[1,1]
city.info[1,]
city.info[,1]
city.info[c ("Seoul","Washington")]
city.info[1,1]
city.info[1,]
city.info[,1]
city.info[c ("Seoul","Washington"),]
city.info[c ("Seoul"),]
city.info[city.info]
city.info[city.info$city]
city.info[city.info$city,]
city.info[, "rank"]
person.info$name
person.info[person.info$name == "Hong", ]
person.info[person.info$name == "Hong", c("name","age")]
data()
iris
iris[ , c(1:2)]
iris[ , c(1,3,5)]
iris[ , c("Sepal.Length","Species")]
iris[1:5,] ;    iris[1:5, c(1,3)]
data()
mtcars
state.x77
# Matrix와 Data Frame에서 사용하는 함수
dim(person.info)
nrow(m3)
nrow(person.info)
ncol(m3)
head(iris)
tail(iris)
str(iris)
iris[, 5]
unique(iris[, 5])
table( iris[, "Species"])
person.info
dim(person.info)
nrow(m3)
nrow(person.info)
ncol(m3)
head(iris)
tail(iris)
str(iris)
iris[, 5]
unique(iris[, 5])
table( iris[, "Species"])
dim(person.info)
person.info
dim(person.info)
nrow(m3)
dim(iris)
nrow(m3)
ncol(m3)
str(iris)
str(city.info)
str(person.info)
head(iris)
tail(iris)
str(city.info)
str(person.info)
iris[, 5]
unique(iris[, 5])
table( iris[, "Species"])
table(person.info[ , "blood.type"])
str(person.info)
table(person.info[ , "blood.type"])
table(person.info[ , "gender"])
unique(iris[, 5])
person.info
colSums(iris[, -5]);          apply(iris[, 1:4], 2, sum)
colMeans(iris[,-5]);          apply(iris[, 1:4], 2, mean)
rowSums(iris[,-5]);           apply(iris[, -5], 1, sum)
rowMeans(iris[,-5]);          apply(iris[, -5], 1, mean)
z <- matrix(1:20 , nrow = 4, ncol = 5) ; z
t(z)
IR.1 <- subset(iris, species == "setosa"); IR.1
IR.1 <- subset(iris, Species == "setosa"); IR.1
IR.2 <- subset(iris, Sepal.Length > 5.0 & Sepal.Length > 4.0); IR.2
apply(iris[, 1:4], 2, mean)
str(iris)
colSums(iris[, -5]);
rowSums(iris[,-5])
colMeans(iris[,-5])
rowMeans(iris[,-5])
IR.1 <- subset(iris, Species == "setosa"); IR.1
IR.2 <- subset(iris, Sepal.Length > 5.0 & Sepal.Length > 4.0); IR.2
IR.2 <- subset(iris, Sepal.Length > 5.0 & Sepal.Width > 4.0); IR.2
IR.2[, c(2,4)]
a <- matrix(1:20 , 4,5) ; a
b <- matrix(21:40 , 4,5); b
2*a
b-5
2*a+3*b
a+b
b-a
b/a
a*b
colSums(iris[, -5]);
colMeans(iris[,-5]);
class(iris)
class(state.x77)
is.matrix(iris)
is.data.frame(iris)
is.matrix(state.x77)
is.data.frame(state.x77 )
st <- data.frame(state.x77)
str(st)
head(st)
class(st)
score
class(iris) ;
str(iris)
class(state.x77)
str(state.x77 )
is.matrix(iris)
is.data.frame(iris)
is.matrix(state.x77)
is.data.frame(state.x77 )
str(st)
head(st)
head(state.x77)
str(st)
str(state.x77 )
str(st)
head(st)
class(st)
dim(st)
dim(state.x77)
iris.m <- as.matrix(iris[, 1:4])
head(iris.m)
class(iris.m)
str(iris.m)
head(iris.m)
str(iris.m)
class(iris.m)
head(st)
sum(st[-5])
head(st)
Population
attach(st)
Population
Income
str(st)
sum(Population)
mean(Population)
detach(st) # attach 함수 제거.
Population
colSums(iris[, -5]);
dim(state.x77)
head(state.x77)
class(iris.m)
str(iris.m)
IR.2[, c(2,4)]
city.info[city.info$city, ]
setwd("D:/test1/lyt09/workR")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
setwd("D:/test1/lyt09/workR")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
setwd("D:/test1/lyt09/workR")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
class(air)
dim(air)
str(air)
head(air)
tail(air)
