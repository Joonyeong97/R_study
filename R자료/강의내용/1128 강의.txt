Program 작성

1. 문제 정의 / 이해
2. 기억장소 결정
3. 알고리즘 결정(일처리 순서) -> 제어구조 이용

pseudo code = 무엇을 구할건지 차근차근 설명해서 알고리즘을 짠다


함수(Function)란
단위 기능을 수행하는 Code 집합 (Block)

내장함수  - R에서 제공하는 함수

사용자 정의 함수 - 제 3자 함수, 사용자 정의 함수 -> 필요할때 설치해서 사용

Package = 함수를 포함한 File

반복적인 기능을 별도로 작성하기 위해서  함수 작성

return 값 = 함수 동작 후 되돌려 주는 값 / 1개만 가능 / 없을수도있음

함수명 <- function ( 인수 list ) {
함수내용 code 작성

return ( 리턴값 )
}

함수 유형
1. 인수 없고 , return 없는경우
2. 인수 있고 , return 없는경우
3. 인수 없고 , return 있는경우
4. 인수 있고 , return 있는경우

# 외부 파일에 있는 함수 호출
setwd("D:/workR")     # 경로 지정 역슬래시 말고 슬래시임.
source("mylib.R")     # Lib 파일 지정

project
- bin
- Lib
- Data
- Tmp
- Doc

vector( 1차원 배열, 열의 집합)
= 배열함수
함수는 c

벡터는 무조건 동일 자료형 집합을 사용해야한다.
a는 a
1은 1
True 는 false

동일한 데이터를 반복
rep = 
v5 <- rep(1, times = 5)
11111

seq =
v3 <- seq(1,101,3) = 1부터 3씩증가

NA : 결측치 (missing value)
Null : 아무것도 없다.
NoN : 계산할수 없다.
Inf : 무한대



# 벡터에서 여러 개의 값을 한번에 추출
d <- c(1,4,3,7,8) # 벡터
d[c(1,3,5)]       # 첫번째 숫자 세번째 숫자 다섯번째 숫자 출력
d[1:3]            # 1~3번째 숫자까지 출력
d[seq(1,5,2)]    # 1~5번째 숫자까지 2개씩 건너서 출력
d[-2]             # 두번째 배열 삭제
d[-c(3:5)]        # 3~5번째 배열 삭제
d

GNP <- c(2090,2450,960); GNP
names(GNP) <- c("Korea","Japan","Nepal"); GNP
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]



# Vector 요소값 변경 
v1 <- c(1,5,7,8,9); v1
v1[2] <-3; v1
v1[ c(1,5)] <- c(10,20); v1


# Vector 간 연산 단! 인덱스간 길이가 같아야됨.
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z


# Vector 에 적용가능한 함수
d <- c(1,2,3,4,5,6,7,8,9,10)
sum(d) # 합계
sum(2*d)
length(d) # 벡터의 요소 개수(길이)
mean(d[1:5]) # 평균
mean(d)
median(d[1:5]) # 중앙값
median(d)
max(d) # 최대값
min(d) # 최소값
sort(d) # 정렬
sort(d, decreasing = FALSE)
sort(d, decreasing = TRUE)
range(d) # 값의 범위
var(d) # 분산
sd(d) # 표준 편차

# 벡터에 논리연산 적용
d <- c(1,2,3,4,5,6,7,8,9,10)
d>5 # 논리적으로 TRUE OR FALSE 판단해라
d[d>5] # 배열안에 5보다 큰수를 찾아라
sum(d>5) # d 안에있는 배열중에 5보다 작은수(True수) 가 몇개냐
sum(d[d>5]) # d 안에있는 d배열중에서 5보다 큰수를 더해라
d==5 # 논리적으로 d 안에있는 배열중에 5랑 같은수가 있는가?

cond <- d > 5 & d < 8; cond
d[cond]

all(d>5) # d에있는 배열이 전부다 5보다 크냐?
any(d>5) # d에있는 배열안에 5보다 큰수가 있느냐?


head(d) # 지정안하면 처음부터 6개 출력
tail(d) # 지정안하면 끝부터 6개 출력
head(d,3) # 처음부터 배열 3번째까지 출력
tail(d,3) # 끝에서 배열 3번째까지 역순으로 출력

x <- c(1,2,3)
y <- c(3,4,5)
z <- c(3,1,2)

w <- c(x,y); w

union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?


vector : 동일 자료형 기억장소 집합 (1차원 배열, 열의 집합)
List : 다른 Datatype의 자료를 저장하는 구조 / Key(변수) : Value 형식으로 저장
Fector = 범위형 타입
key = 변수명