for ( i  in 1:length( score )) {
print(score[i])
}
score_names <- c("Lim","Yeong","Taeck")
for (i in 1:length(score)) {
print(score[score_names[i] ])
}
# 벡터에서 여러 개의 값을 한번에 추출
d <- c(1,4,3,7,8)
d[c(1,3,5)]
d[1:3]
d[seq(1,5,2)]
d[-2]
d[-c(3:5)]
d
GNP <- c(2090,2450,960); GNP
names(GNP) <- c("Korea","Japan","Nepal"); GNP
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
# 벡터 원소값에 이름 지정
score <- c(90,85,70); score
names(score)    # 이름 지정 함수
names(score) <- c("Lim","Yeong","Taeck")
names(score)
score
# vector 원 소 접 근
score(1)
score(2)
score(3)
score("Lim")
score("Yeong")
score("Taeck")
# 벡터 원소값에 이름 지정
score <- c(90,85,70); score
names(score)    # 이름 지정 함수
names(score) <- c("Lim","Yeong","Taeck")
names(score)
score
# vector 원 소 접 근
score[1]
score[2]
score[3]
score["Lim"]
score["Yeong"]
score["Taeck"]
# 벡터에서 여러 개의 값을 한번에 추출
d <- c(1,4,3,7,8) # 벡터
d[c(1,3,5)]       # 첫번째 숫자 세번째 숫자 다섯번째 숫자 출력
d[1:3]            # 1~3번째 숫자까지 출력
d[seq(1,5,2)]     # 1~5번째 숫자까지 2개씩 건너서 출력
d[-2]             # 두번째 배열 삭제
d[-c(3:5)]        # 3~5번째 배열 삭제
d
GNP <- c(2090,2450,960); GNP
names(GNP) <- c("Korea","Japan","Nepal"); GNP
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
# Vector 요소값 변경
v1 <- c(1,5,7,8,9); v1
v1[2] <-3; v1
v1[ c(1,5)] <- c(10,20); v1
# Vector 간 연산
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z
# Vector 에 적용가능한 함수
d <- c(1,2,3,4,5,6,7,8,9,10)
sum(d) # 합계
sum(2*d)
length(d) # 벡터의 요소 개수(길이)
mean(d[1:5]) # 평균
mean(d)
median(d[1:5]) # 중앙값
median(d)
max(d) # 최대값
min(d) # 최소값
sort(d) # 정렬
sort(d, decreasing = FALSE)
sort(d, decreasing = TRUE)
range(d) # 값의 범위
var(d) # 분산
sd(d) # 표준 편차
rank(d) # 순위
rank(d, decompose = TRUE) # 순위
rank(d,sort(decreasing = TRUE)) # 순위
rank(d,sort(d,decreasing = TRUE)) # 순위
order(d) # 색인
d <- c(1,2,3,4,88,6,7,8,9,10)
rank(d) # 순위
order(d) # 색인
d <- c(1,2,3,4,5,6,7,8,9,10)
v <- sum(d) / length(d); v
# 벡터에 논리연산 적용
d>=5
d[d>5]
sum(d>5)
sum(d[d>5])
d==5
cond <- d > 5 & d < 8; cond
d[cond]
all(d>5)
any(d>5)
head(d)
tail(d)
head(d,3)
tail(d,3)
sum(d[d>5]) #
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(3,1,2)
w <- c(x,y)
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(3,1,2)
w <- c(x,y); w
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
intersect(x,y)  # 교 집합
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(3,1,2)
w <- c(x,y); w
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
x <- c(1,2,3)
y <- c(3,4,5)
z <- c(3,1,2)
w <- c(x,y); w
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
sum(d[d>5]) #
d <- c(1,2,3,4,5,6,7,8,9,10)
d>=5 # 논리적으로 TRUE OR FALSE 판딴햬라
d[d>5] # 배열안에 5보다 큰수를 찾아라
sum(d>5) # d 안에있는 배열중에 5보다 작은수를 세어라
sum(d[d>5]) #
d==5 # 논리적으로 d 안에있는 배열중에 5랑 같은수가 있는가?
d <- c(1,2,3,4,5,6,7,8,9,10)
d>5 # 논리적으로 TRUE OR FALSE 판딴햬라
d[d>5] # 배열안에 5보다 큰수를 찾아라
sum(d>5) # d 안에있는 배열중에 5보다 작은수를 세어라
sum(d[d>5]) #
d==5 # 논리적으로 d 안에있는 배열중에 5랑 같은수가 있는가?
# List
ds <- c(90,85,70,84)
my.info <- list(name = 'Hong', age = 30, status = TRUE,
score = ds)
my.info
my.info[1]
my.info[[1]]
my.info$name
my.info[[4]]
my.info[[4]][1]
# Factor 형
bt <- c('A','B','C','O','AB','A')
bt.new <- factor(bt)
bt
bt.new
bt[5]
bt.new[5]
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
# Factor 형
bt <- c('A','B','C','O','AB','A')
bt.new <- factor(bt)
bt # 문자형 자료 6개 출력
bt.new  # 팩터 함수사용
bt[5] # 5번째 단어 출력
bt.new[5] # 5번째 단어 출력
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
bt <- c('A','B','B','O','AB','A')
bt.new <- factor(bt)
bt # 문자형 자료 6개 출력
bt.new  # 팩터 함수사용
bt[5] # 5번째 단어 출력
bt.new[5] # 5번째 단어 출력
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
d1 <- c(1:50)
d2 <- c(51:100)
d1
d2
d1+d2
d2-d1
d1*d2
d2/d1
sum(d)
sum(d1)
sum(d2)
sum(d1)+sum(d2)
mean(d2) - mean(d1)
sort(d1,decreasing = TRUE)
head(d1,10)
head(d2,10)
a1 <- head(d1,10)
a2 <- head(d2,10)
d1 <- c(1:50)
d2 <- c(51:100)
d3 <- NULL
a1 <- c()
a2 <- c()
a1 <- head(d1,10)
a2 <- head(d2,10)
a1
a2
d3 <- c(a1,a2)
d3
d3
print(c)
v1 <- c(51:90)
a1 <- NULL
print(c)
print(c)
cat(c)
cat(v1)
v1(v1<60)
v1 <- c(51:90)
a1 <- NULL
v1(v1<60)
v1 [v1<60]
sum(v1<70)
sum[v1<70]
sum(v1<70)
sum (v1[v1<65])
sum (v1[v1>65])
v1[v1>60]
v1[v1<60]
v1 [v1<60]
v1[v1>60]
v1[v1>60 | v1<73]
v1[v1>60 | v1>73]
v1[v1>60 | 73]
v1[v1>60 | 60>73]
v1[v1>60 | 60<73]
v1[v1>60 | v1>73]
v1[v1>60 & v1>73]
v1[v1>60 & v1<=73]
length(v1)
v1 [v1<60]
sum (v1<70)
sum (v1[v1>65])
v1[v1>60 & v1<=73]
v1[v1<65 | v1<80]
v1[v1<65 | v1>80]
v1[v1 / 3 == 0]
v1[v1 %% 3 == 0]
v1[v1 %% 7 == 0]
v1[v1 %% 7 == 0] <-  0
v1
sum(v1[v1 %% 2 == 0])
v1[ v1 %% 2 != 0 ]
v1[ v1 %% 2 != 0 | v1>80]
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
v1 <- c(51:90)
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
sum(v1[v1 %% 2 == 0])
v1[ v1 %% 2 != 0 | v1>80]
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
a1 <- v1[v1 %% 2 == 0] * 2
a1
v1 <- v1[v1 %% 7 == 0]
v1 <- v1[v1 %% 7 == 0]
v1
v1 <- c(51:90)
v1
v1 <- v1[v1 %% 7 == 0]
v1
v1 <- c(51:90)
v1
v1 <- v1[v1 %% 7 =! 0]
v1
v1 <- v1[v1 %% 7 != 0]
v1
v1 <- c(51:90)
v1[v1 %% 7 != 0] # 12번 문제
as <- v1[v1 %% 7 != 0] # 12번 문제
as <- v1[v1 %% 7 != 0]  # 12번 문제
as
d <- c(50:99)
d(d>60)
d(d>60)
d <- c(50:99)
d(d>60)
d
d <- c(50:99)
d[d>60]
d
sum(d<=60)
d<=60
sum(d<=60)
sum(d[60])
sum(d[10])
d[10]
v1[v1<65 | v1>80] # 5번문제
sum (v1[v1>65]) # 3번문제
v1 [v1<60] # 1번문제
sum (v1<70) # 2번문제
v1 [v1<60] # 1번문제 인덱스 내용물중 60미만인수
air <- read.csv("airquality.csv", header = T)
setwd("D:/test1/lyt09/workR")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
as.numeric(air[1,2,4:6])
str(air)
setwd("D:/test1/lyt09/workR")
write.csv(person.info, "person_info.csv", row.names = F)
person.info <- data.frame(name,age,gender,blood.type)
person.info
name <- c("Hong","Kim","Lee")
age <- c(22,20,25)
gender <-  factor(c("M","F","M") )
blood.type <-  factor(c("A","O","B") )
person.info <- data.frame(name,age,gender,blood.type)
person.info
setwd("D:/test1/lyt09/workR")
write.csv(person.info, "person_info.csv", row.names = F)
setwd("D:/test1/lyt09/workR")
air <- read.csv("airquality.csv", header = T)
class(air)
dim(air)
str(air)
head(air)
tail(air)
str(air)
#
#
# 임영택 20191129/20191202
#
#
gender <- c(10,21,40,60,60,70,20,30)
gender
gender <- matrix(c(10,21,40,60,60,70,20,30))
gender
gender <- matrix(c(10,21,40,60,60,70,20,30),4,2)
gender
colnames(gender) <- c("male","female")
gender
gender(c[2,])
gender <- matrix(c(10,21,40,60,60,70,20,30),4,2) # 매트릭스함수 선언
colnames(gender) <- c("male","female") # 열 이름을 Male / Female 입력
gender(c[2,])
gender
gender[2,]
gender[,"female"]
gender[3,2]
st <- data.frame(state.x77)
st
str(st) # 확인용
st[1,]
st[,1]
st[,"name"]
dim(st) # 확인용
rownames(st)
colnames(st)
dim(st) # 확인용
str(st) # 확인용
colSums(st)
rowsum(st)
colSums(st)
rowsum(st)
str(st) # 확인용
head(st) # 확인용
colMeans(st)
rowMeans(st)
rowsum(st)
apply(st,1,sum)
apply(st,2,sum)
apply(st, 2, mean)
apply(st,1, mean)
str(st) # 확인용
head(st) # 확인용
st[,2]
st[1,2]
st[,2]
st
st[9,]
st <- subset(st, "Florida")
st <- subset(st, Florida)
IR.2[, c(2,4)]
IR.2 <- subset(iris, Sepal.Length > 5.0 & Sepal.Width > 4.0); IR.2
IR.2[, c(2,4)]
IR.1 <- subset(iris, Species == "setosa"); IR.1
st1 <- subset(st[9]); st1
st1 <- subset(st[9,]); st1
st1 <- subset(st["Florida", ]); st1
st2 <- subset(st[,"Income"]); st2
st2 <- subset(st[ ,"Income"]); st2
st <- data.frame(state.x77) # Dataframe으로 선언
st2 <- subset(st[ ,"Income"]); st2
st1 <- subset(st["Florida", ]); st1 # 검색활용
st2 <- subset(st[ ,"Income"])
st2 <- subset(st[1 ,"Income"])
st2 <- NULL
st2 <- subset(st[1 ,"Income"]); st2
st2 <- subset(st[50 ,"Income"]); st2
st2 <- subset(st[50 ,Income]); st2
st2 <- subset(st[50 ,'Income']); st2
st2 <- subset(st[,'Income'])
st2 <- subset(st['Folorida','Income'])
st2 <- subset(st['Folorida',])
st2 <- subset(st['Folorida',]); st2
st1 <- subset(st["Florida", ]); st1 # 검색활용
st2 <- subset(st["Folorida",]); st2
st <- data.frame(state.x77) # Dataframe으로 선언
st2 <- subset(st["Folorida",]); st2
st2 <- subset( st ["Folorida", ] ); st2
sq <- subset( st ["Folorida", ] ); sq
st[,2]
st1 <- subset( st [, "Income"] ); st1 # 검색활용
sq <- subset( st [, 2] ); sq
sq = subset( st [, 2] ); sq
st3 <- subset(st [ "Texas", "Area" ] ) ; st3
st1 <- subset( st ["Florida", ] ); st1 # 검색활용
sq <-  subset( st [, "Income"] ); sq #Error
sq <-  subset( st [  "Income"] ); sq #Error
st3 <- subset(st [ "Texas", "Area" ] ) ; st3
st3 <- subset(st [ "Texas" == T, "Area" == T ] ) ; st3
st3 <- subset( st [ "Texas", "Area" ], ) ; st3
st3 <- subset( st, "Texas"  ) ; st3
st3 <- subset( st, "Texas" == T  ) ; st3
st3 <- subset( st, "Texas" == 0  ) ; st3
st3 <- subset( st, Texas  ) ; st
st3 <- subset( st["Texas"]    ) ; st3
st3 <- subset( st["Texas"],    ) ; st3
st3 <- subset( st ["Texas",]    ) ; st3
st3 <- subset( st ["Texas",],Area    ) ; st3
st3 <- subset( st ["Texas",], 5    ) ; st3
st3 <- subset( st ["Texas",], select = "Area"    ) ; st3
st2 <-  subset( st ["Income"] ); st2 # 50개주 Income만 출력
st4 <- subset( st["Ohio",],select = "Population", "income") ; st4
st4 <- subset( st["Ohio",],select = "Population",select = "income") ; st4
st4 <- subset( st["Ohio",],select = "Population") ; st4
st4 <- subset( st["Ohio",],select = "Population","Income") ; st4
st4 <- subset( st["Ohio",],select = "Population","Income") ; st4
st4 <- subset( st["Ohio",],select = "Population", select("Income")) ; st4
st4 <- subset( st["Ohio",],select = "Population", st(,"Income")) ; st4
st4 <- subset( st["Ohio",],select = "Population" | select = "Income") ; st4
st
st4 <- subset( st["Ohio",1],select = "Income") ; st4
st4 <- subset( st["Ohio","Population"],select = "Income") ; st4
st4 <- subset( st["Ohio",],select = "Income") ; st4
st4 <- subset( st["Ohio",],select = 1,2) ; st4
st4 <- subset( st["Ohio",],select = st[,2] ) ; st4
st4 <- subset( st["Ohio",],select = st[,2] ) ; st4
st4 <- subset( st["Ohio",],select = st[,2] ) ; st4
st4 <- subset( st["Ohio",],drop = TRUE ) ; st4
st4 <- subset( st["Ohio",],drop = FALSE ) ; st4
st4 <- subset( st["Ohio",],
select = c(2) ) ; st4
st4 <- subset( st["Ohio",],
select = c(1,2) ) ; st4
st4 <- subset( st["Ohio",],
select = c("Population","Income") ) ; st4
st
st5 <- subset(st,
select = c("Population")) ; st5
st5 <- subset(st,
select = c("Population")) > 5000 ; st5
st5 <- subset(st,
select = c("Population")) != 5000 ; st5
st5 <- subset(st,
select = c("Population")) > 5000 ; st5
st5 <- subset(st,
select = c("Population") >5000) ; st5
st5 <- subset(st,
select = c("Population"),
subset = (5000)) ; st5
st5 <- subset(st,
select = c("Population"),
subset = >5000) ; st5
st5 <- subset(st,
select = c("Population"),
subset = (>5000) ; st5
st5 <- subset(st["Population"]>5000)
st5 <- subset(st["Population"]>5000); st5
st5 <- subset(st["Population"]>5000,select = c(1))
st5
st5 <- subset(st["Population"]>5000,select = c(TRUE))
st5
st5 <- subset(st["Population"]>5000,select = TRUE)
st5
