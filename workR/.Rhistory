v <- c(10,5,8)
max <- v[1]
for ( i in 2:length(v)-1 ) {
if (v [ i ] > max) {
max <- v[i]
}
}
max
v <- c(10,5,8,7,15,56,23,45,98,102)
max <- v[1]
for ( i in 2:length(v) ) {
if (v [ i ] > max) {
max <- v[i]
}
}
max
#
# Vector 도입
#
a <- 10
b <- 5
c <- 8
d <- 15
f <- 18
g <- 19
h <- 32
i <- 28
j <- 65
k <- 75
max <- a
if (b>max) { max <- b }
if (c>max) { max <- c }
if (d>max) { max <- d }
if (e>max) { max <- e }
if (f>max) { max <- f }
if (g>max) { max <- g }
if (h>max) { max <- h }
if (i>max) { max <- i }
if (j>max) { max <- j }
if (k>max) { max <- k }
max
a <- 10
b <- 5
c <- 8
d <- 15
e <- 22
f <- 18
g <- 19
h <- 32
i <- 28
j <- 65
k <- 75
max <- a
if (b>max) { max <- b }
if (c>max) { max <- c }
if (d>max) { max <- d }
if (e>max) { max <- e }
if (f>max) { max <- f }
if (g>max) { max <- g }
if (h>max) { max <- h }
if (i>max) { max <- i }
if (j>max) { max <- j }
if (k>max) { max <- k }
max
v <- c(10,5,8,7,15,56,23,45,98,102)
max <- v[1]
for ( i in 2:length(v) ) {
cat(v)
cat(length(v))
if (v [i] > max) {
max <- v[i]
}
}
max
v <- c(10,5,8,7,15,56,23,45,98,102)
max <- v[1]
for ( i in 2:length(v) ) {
cat(v)
if (v [i] > max) {
max <- v[i]
}
}
max
v <- c(10,5,8,7,15,56,23,45,98,102)
max <- v[1]
for ( i in 2:length(v) ) {
cat(length(v))
if (v [i] > max) {
max <- v[i]
}
}
max
v <- c(10,5,8,7,15,56,213,45,98,102)
max <- v[1]
for ( i in 2:length(v) ) {
cat(length(v))
if (v [i] > max) {
max <- v[i]
}
}
max
# vector 생성
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
# vector 생성
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
class(x); class(y);class(z)
# vector 생성
x <- e(1,2,3)
y <- e("a","b","c")
z <- e(TRUE,TRUE,FALSE,TRUE)
x;y;z
# vector 생성
x <- c(1,2,3)
y <- c("a","b","c")
z <- c(TRUE,TRUE,FALSE,TRUE)
x;y;z
w <- c(1,2,3,"a")
w
class(w)
v1 <- 50:90; v1
v2 <- c(1,2,3,50:90) ; v2
v2 <- c(1:3,50:90) ; v2
v2 <- c(1:3,50:90) ; v2
class(v1);class(v2)
v1 <- 0.1; v1
v2 <- c(1:3,50:90) ; v2
class(v1);class(v2)
v3 <- seq(1,101,3); v3
v4 <- seq(0.1,1.0,0.2); v4
v5 <- rep(1, times = 5); v5
v6 <- rep(1:5, times = 3); v6
v7 <- rep(c(1,5,9), times=3); v7
v4 <- seq(0.1,1.0,0.1); v4
# 벡터 원소값에 이름 지정
score <- c(90,85,70); score
names(score)
names(score) <- c("Lim","yeong","Taeck")
names(score)
score
score
names(score)
score
# vector 원 소 접 근
score(1)
score(2)
score(3)
score("Hong")
score("Kim")
score("Lee")
d <- c(1,4,3,7,8)
d[1]; d[2]; d[3]; d[4]; d[5]; d[6];
score
# 벡터 원소값에 이름 지정
score <- c(90,85,70); score
names(score)    # 이름 지정 함수
names(score) <- c("Lim","Yeong","Taeck")
names(score)
score
score(1)
for ( i  in 1:length( score )) {
print(score[i])
}
score_names <- c("Hong","Kim","Lee")
for (i in 1:length(score)) {
print(score[score_names[i] ])
}
for ( i  in 1:length( score )) {
print(score[i])
}
score_names <- c("Lim","Yeong","Taeck")
for (i in 1:length(score)) {
print(score[score_names[i] ])
}
score(1)
score(2)
score(3)
score("Lim")
score("Yeong")
score("Taeck")
for ( i  in 1:length( score )) {
print(score[i])
}
score_names <- c("Lim","Yeong","Taeck")
for (i in 1:length(score)) {
print(score[score_names[i] ])
}
# 벡터에서 여러 개의 값을 한번에 추출
d <- c(1,4,3,7,8)
d[c(1,3,5)]
d[1:3]
d[seq(1,5,2)]
d[-2]
d[-c(3:5)]
d
GNP <- c(2090,2450,960); GNP
names(GNP) <- c("Korea","Japan","Nepal"); GNP
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
# 벡터 원소값에 이름 지정
score <- c(90,85,70); score
names(score)    # 이름 지정 함수
names(score) <- c("Lim","Yeong","Taeck")
names(score)
score
# vector 원 소 접 근
score(1)
score(2)
score(3)
score("Lim")
score("Yeong")
score("Taeck")
# 벡터 원소값에 이름 지정
score <- c(90,85,70); score
names(score)    # 이름 지정 함수
names(score) <- c("Lim","Yeong","Taeck")
names(score)
score
# vector 원 소 접 근
score[1]
score[2]
score[3]
score["Lim"]
score["Yeong"]
score["Taeck"]
# 벡터에서 여러 개의 값을 한번에 추출
d <- c(1,4,3,7,8) # 벡터
d[c(1,3,5)]       # 첫번째 숫자 세번째 숫자 다섯번째 숫자 출력
d[1:3]            # 1~3번째 숫자까지 출력
d[seq(1,5,2)]     # 1~5번째 숫자까지 2개씩 건너서 출력
d[-2]             # 두번째 배열 삭제
d[-c(3:5)]        # 3~5번째 배열 삭제
d
GNP <- c(2090,2450,960); GNP
names(GNP) <- c("Korea","Japan","Nepal"); GNP
GNP[1]
GNP["Korea"]
GNP[c("Korea","Nepal")]
# Vector 요소값 변경
v1 <- c(1,5,7,8,9); v1
v1[2] <-3; v1
v1[ c(1,5)] <- c(10,20); v1
# Vector 간 연산
x <- c(1,2,3)
y <- c(4,5,6)
x+y
x*y
z <- x+y
z
# Vector 에 적용가능한 함수
d <- c(1,2,3,4,5,6,7,8,9,10)
sum(d) # 합계
sum(2*d)
length(d) # 벡터의 요소 개수(길이)
mean(d[1:5]) # 평균
mean(d)
median(d[1:5]) # 중앙값
median(d)
max(d) # 최대값
min(d) # 최소값
sort(d) # 정렬
sort(d, decreasing = FALSE)
sort(d, decreasing = TRUE)
range(d) # 값의 범위
var(d) # 분산
sd(d) # 표준 편차
rank(d) # 순위
rank(d, decompose = TRUE) # 순위
rank(d,sort(decreasing = TRUE)) # 순위
rank(d,sort(d,decreasing = TRUE)) # 순위
order(d) # 색인
d <- c(1,2,3,4,88,6,7,8,9,10)
rank(d) # 순위
order(d) # 색인
d <- c(1,2,3,4,5,6,7,8,9,10)
v <- sum(d) / length(d); v
# 벡터에 논리연산 적용
d>=5
d[d>5]
sum(d>5)
sum(d[d>5])
d==5
cond <- d > 5 & d < 8; cond
d[cond]
all(d>5)
any(d>5)
head(d)
tail(d)
head(d,3)
tail(d,3)
sum(d[d>5]) #
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(3,1,2)
w <- c(x,y)
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(3,1,2)
w <- c(x,y); w
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
intersect(x,y)  # 교 집합
x <- c(1,2,3)
y <- c(4,5,6)
z <- c(3,1,2)
w <- c(x,y); w
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
x <- c(1,2,3)
y <- c(3,4,5)
z <- c(3,1,2)
w <- c(x,y); w
union(x,y)      # 합 집합
intersect(x,y)  # 교 집합
setdiff(x,y)    # 차 집합
setequal(x,y)   # x, y에 동일한 요소가 있는지?
setequal(x,z)   # x, z에 동일한 요소가 있는지?
sum(d[d>5]) #
d <- c(1,2,3,4,5,6,7,8,9,10)
d>=5 # 논리적으로 TRUE OR FALSE 판딴햬라
d[d>5] # 배열안에 5보다 큰수를 찾아라
sum(d>5) # d 안에있는 배열중에 5보다 작은수를 세어라
sum(d[d>5]) #
d==5 # 논리적으로 d 안에있는 배열중에 5랑 같은수가 있는가?
d <- c(1,2,3,4,5,6,7,8,9,10)
d>5 # 논리적으로 TRUE OR FALSE 판딴햬라
d[d>5] # 배열안에 5보다 큰수를 찾아라
sum(d>5) # d 안에있는 배열중에 5보다 작은수를 세어라
sum(d[d>5]) #
d==5 # 논리적으로 d 안에있는 배열중에 5랑 같은수가 있는가?
# List
ds <- c(90,85,70,84)
my.info <- list(name = 'Hong', age = 30, status = TRUE,
score = ds)
my.info
my.info[1]
my.info[[1]]
my.info$name
my.info[[4]]
my.info[[4]][1]
# Factor 형
bt <- c('A','B','C','O','AB','A')
bt.new <- factor(bt)
bt
bt.new
bt[5]
bt.new[5]
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
# Factor 형
bt <- c('A','B','C','O','AB','A')
bt.new <- factor(bt)
bt # 문자형 자료 6개 출력
bt.new  # 팩터 함수사용
bt[5] # 5번째 단어 출력
bt.new[5] # 5번째 단어 출력
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
bt <- c('A','B','B','O','AB','A')
bt.new <- factor(bt)
bt # 문자형 자료 6개 출력
bt.new  # 팩터 함수사용
bt[5] # 5번째 단어 출력
bt.new[5] # 5번째 단어 출력
levels(bt.new)
as.integer(bt.new)
bt.new[7] <- 'B'
bt.new[8] <- 'C'
bt.new
d1 <- c(1:50)
d2 <- c(51:100)
d1
d2
d1+d2
d2-d1
d1*d2
d2/d1
sum(d)
sum(d1)
sum(d2)
sum(d1)+sum(d2)
mean(d2) - mean(d1)
sort(d1,decreasing = TRUE)
head(d1,10)
head(d2,10)
a1 <- head(d1,10)
a2 <- head(d2,10)
d1 <- c(1:50)
d2 <- c(51:100)
d3 <- NULL
a1 <- c()
a2 <- c()
a1 <- head(d1,10)
a2 <- head(d2,10)
a1
a2
d3 <- c(a1,a2)
d3
d3
print(c)
v1 <- c(51:90)
a1 <- NULL
print(c)
print(c)
cat(c)
cat(v1)
v1(v1<60)
v1 <- c(51:90)
a1 <- NULL
v1(v1<60)
v1 [v1<60]
sum(v1<70)
sum[v1<70]
sum(v1<70)
sum (v1[v1<65])
sum (v1[v1>65])
v1[v1>60]
v1[v1<60]
v1 [v1<60]
v1[v1>60]
v1[v1>60 | v1<73]
v1[v1>60 | v1>73]
v1[v1>60 | 73]
v1[v1>60 | 60>73]
v1[v1>60 | 60<73]
v1[v1>60 | v1>73]
v1[v1>60 & v1>73]
v1[v1>60 & v1<=73]
length(v1)
v1 [v1<60]
sum (v1<70)
sum (v1[v1>65])
v1[v1>60 & v1<=73]
v1[v1<65 | v1<80]
v1[v1<65 | v1>80]
v1[v1 / 3 == 0]
v1[v1 %% 3 == 0]
v1[v1 %% 7 == 0]
v1[v1 %% 7 == 0] <-  0
v1
sum(v1[v1 %% 2 == 0])
v1[ v1 %% 2 != 0 ]
v1[ v1 %% 2 != 0 | v1>80]
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
v1 <- c(51:90)
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
sum(v1[v1 %% 2 == 0])
v1[ v1 %% 2 != 0 | v1>80]
v1[v1 %% 3 == 0 | v1 %% 5 == 0]
a1 <- v1[v1 %% 2 == 0] * 2
a1
v1 <- v1[v1 %% 7 == 0]
v1 <- v1[v1 %% 7 == 0]
v1
v1 <- c(51:90)
v1
v1 <- v1[v1 %% 7 == 0]
v1
v1 <- c(51:90)
v1
v1 <- v1[v1 %% 7 =! 0]
v1
v1 <- v1[v1 %% 7 != 0]
v1
v1 <- c(51:90)
v1[v1 %% 7 != 0] # 12번 문제
as <- v1[v1 %% 7 != 0] # 12번 문제
as <- v1[v1 %% 7 != 0]  # 12번 문제
as
d <- c(50:99)
d(d>60)
d(d>60)
d <- c(50:99)
d(d>60)
d
d <- c(50:99)
d[d>60]
d
sum(d<=60)
d<=60
sum(d<=60)
sum(d[60])
sum(d[10])
d[10]
v1[v1<65 | v1>80] # 5번문제
sum (v1[v1>65]) # 3번문제
v1 [v1<60] # 1번문제
sum (v1<70) # 2번문제
v1 [v1<60] # 1번문제 인덱스 내용물중 60미만인수
