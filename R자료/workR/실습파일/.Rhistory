pairs(trees, panel = panel.smooth,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
diag.panel = panel.hist, cex.labels = 2, font.labels = 2)
pairs(trees, panel =
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 2, pch = 24, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 19, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 20, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 23, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 1, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 5, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 23, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "light blue", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=TRUE,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=false,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red",
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 2, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 2)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 3)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 4)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 5)
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 4)
### 5-2번
pairs(trees,
cex = 1.5, pch = 24, bg = "red", horOdd=T,
cex.labels = 3, font.labels = 4)
cor(trees)
# cex = 크기
# pch = 점의 모양
# bg = 점의 색상
# cex.labels = 열의 폰트크기
# font.labels = 열의 폰트
x = c('red','green','blue','black','white')
com <- combn(x,3)
com
for (i in i:ncol(com)) {
cat(com[,i], "\n")
}
for (i in 1:ncol(com)) {
cat(com[,i], "\n")
}
agg <- aggregate( iris[, -5] ,
by = list(iris$Species),
FUN = mean )
agg
list(iris$Species)
agg
agg1 <- aggregate( iris[, -5] ,
by = list(iris$Species),
FUN = sd ) #데이터 집계 함수
agg1
agg3 <- aggregate( mtcars ,
by = list(cyl = mtcars$cyl),
vs = mtcars$vs,
FUN = mean ) #데이터 집계 함수
agg3
agg3 <- aggregate( mtcars ,
by = list(cyl = mtcars$cyl),
vs = mtcars$vs,
FUN = max ) #데이터 집계 함수
agg3
agg3 <- aggregate( mtcars ,
by = list(cyl = mtcars$cyl),
vs = mtcars$vs,
FUN = max ) #데이터 집계 함수
agg3
agg3 <- aggregate( mtcars ,
by = list(cyl = mtcars$cyl,
vs = mtcars$vs,
FUN = max ) #데이터 집계 함수
agg3
agg3 <- aggregate( mtcars ,
by = list(cyl = mtcars$cyl,
vs = mtcars$vs),
FUN = max ) #데이터 집계 함수
agg3
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(name = c('a','b','c'),
korean = c(75,60,90))
z <- merge(x,y,by =c('name'))
z
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(name = c('d','e','f'),
korean = c(75,60,90))
z <- merge(x,y,by =c('name'))
z
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(name = c('a','b','c'),
korean = c(75,60,90))
z <- merge(x,y,by =c('name'))
z
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(name = c('a','b','d'),
korean = c(75,60,90))
z <- merge(x,y,by =c('name'))
z
merge(x,y)
merge(x,y)
merge(x,y, all.x = T)
merge(x,y, all.y = T)
merge(x,y, all = T)
merge(x,y)
merge(x,y, all.x = T)
merge(x,y, all.y = T)
merge(x,y, all = T)
mege(x,y,by.x = c('name'),
by.y= c('sname') )
merge(x,y,by.x = c('name'),
by.y= c('sname') )
merge(x,y,by.x = c("name"),
by.y = c("sname") )
x <- data.frame(name = c('a','b','c'),
mat = c(90,80,40))
y <- data.frame(sname = c('a','b','d'),
korean = c(75,60,90))
merge( x, y, by.x = c("name"),
by.y = c("sname") )
install.packages("dplyr")
library(dplyr)
df <- data.frame(var1 = c(1,2,1) ,
var2 = c(2,3,1))
df
df <- rename(df, v1 = var1 , v2 = var2)
df
df$sum <- ds$v1 + df$v2
df$sum <- ds$v1 + df$v2
df$sum <- df$v1 + df$v2
df
df[2,1] <- 5
df
df1 <- data.frame( id = c(1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c(50,60,45,30,25,50),
english = c(98,97,86,98,80,89),
science = c(50,60,78,58,65,98) )
df1
# filter() : 행 추출
df1 %>%  filter(class == 1)
df1 %>%  filter(class == 2)
df1 %>%  filter(class != 1)
df1 %>%  filter(class != 2)
df1 %>%  filter(science > 70)
df1 %>%  filter(math < 50)
df1 %>%  filter(class == 1 & math >= 50)
df1 %>%  filter(math >= 50 | english >= 90)
df1 %>%  filter(class %in% c(1,3,5))
class1 <- df %>% filter(class == 1)
class2 <- df %>% filter(class == 2)
class1
class2
class1 <- df %>% filter(class == 1)
class2 <- df %>% filter(class == 2)
class1 <- df %>% filter(class == 1)
library(dplyr)
library(dplyr)
class1 <- df %>% filter (class == 1)
class2 <- df %>% filter (class == 2)
class1
class2
df1 <- data.frame( id = c(1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c(50,60,45,30,25,50),
english = c(98,97,86,98,80,89),
science = c(50,60,78,58,65,98) )
df1
class1 <- df %>% filter (class == 1)
df1 <- data.frame( id = c(1,2,3,4,5,6),
class = c(1,1,1,1,2,2),
math = c(50,60,45,30,25,50),
english = c(98,97,86,98,80,89),
science = c(50,60,78,58,65,98) )
df1
class1 <- df %>% filter (class == 1)
class2 <- df %>% filter (class == 2)
df1 %>%  filter(class %in% c(1,3,5))
df %>% filter (class == 1)
class1 <- df1 %>% filter (class == 1)
class2 <- df1 %>% filter (class == 2)
class1
class2
# select() : 변수 추출
df %>% select( math )
# select() : 변수 추출
df1 %>% select( math )
df1 %>% select( science )
df1 %>% select(class,math, science)
df1 %>% select(-math)
df1 %>% filter(class == 1) %>%
select(scinece)
df1 %>% filter(class == 1) %>%
select(science)
df1 %>%
select(id, science) %>%
head
source('D:/lyt/lyt09/workR/실습파일/7일차 결측치 or 이상치 처리_데이터정제.R', encoding = 'UTF-8', echo=TRUE)
df1 %>%
select(id, science) %>%
sum
df1 %>%
select(id, science) %>%
max
# arrange() : 정렬
df1 %>%  arrange(science)
df1 %>%  arrange(desc(science))
# mutate() : 파생변수 추가
df1 %>%
mutate(total = math + english + science) %>%
head
df1 %>%
mutate(total = math + english + science,
average = (math + english + science) /3 ) %>%
head
df1 %>%
mutate(grade = ifelse(science >= 60, 'pass', 'fail')) %>%
head
df1 %>%
mutate(total = math + english + science,
average = (math + english + science) /3 ) %>%
mutate( grade = ifelse(average >= 90, 'pass',
ifelse(average <60, 'fail',
'normal'))) %>%
head
df1 %>%
mutate(total = math + english + science,
average = (math + english + science) /3 ) %>%
arrange(desc(average)) %>%
head
# summarise() : 집단별 요약
# group_by() : 집단별 나누기
df1 %>% summarise(mean_math = mean (math))
df1 %>%
group_by(class) %>%
summarise(mean_math = mean(math),
mean_english = mean(english),
mean_science = mean(science),
n = n() )
install.packages("ggplot2")
library(ggplot2)
str(ggplot2::mpg)
dim(mpg)
head(mpg)
str(mpg)
head(mpg)
View(mpg)
View(mpg)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_cty = mean(cty)) %>%
head(10)
mpg %>%
group_by( manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty + hwy) / 2) %>%
summarise(mean_tot = mean (tot)) %>%
arrange(desc(mean_tot)) %>%
head(5)
df2 <- data.frame(id= c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
df3 <- data.frame(id= c(1,2,3,4,5),
final = c(60,80,70,90,85))
total <- left_join(df2,df3,by='id')
df2 <- data.frame(id = c(1,2,3),
address = c('서울', '부산', '제주'),
stringsFactors = F)
df3 <- data.frame(id = c(1,2,4),
gender = c('남', '여', '남'))
total
df2
df_left <- left_join(df2,df3,by = 'id')
df_left
df_inner <- inner_join(df2,df3,by='id')
df_inner
df_full <- full_join(df2,df3,by='id')
df_full
df2 <- data.frame(id = c(1,2,3),
address = c('서울', '부산', '제주'),
stringsAsFactors = F)
df2
df2 <- data.frame(id= c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
df3 <- data.frame(id= c(1,2,3,4,5),
final = c(60,80,70,90,85))
df_all <- bind_rows(df2,df3)
df_all
df_left
df_left <- left_join(df2,df3, by = 'id')
df_left
df_inner <- inner_join(df2,df3, by = 'id')
df_inner
df_full <- full_join(df2,df3,by='id')
df_full
df2 <- data.frame(id= c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
df3 <- data.frame(id= c(1,2,3,4,5),
final = c(60,80,70,90,85))
total <- left_join(df2,df3,by='id')
total
df2 <- data.frame(id = c(1,2,3),
address = c('서울', '부산', '제주'),
stringsAsFactors = F)
df3 <- data.frame(id = c(1,2,4),
gender = c('남', '여', '남'))
df_left <- left_join(df2,df3, by = 'id')
df_left
df_inner <- inner_join(df2,df3, by = 'id')
df_inner
df_full <- full_join(df2,df3,by='id')
df_full
install.packages("psych")
library(psych)
summarise(mtcars)
describe(mtcars)
summariy(mtcars)
summary(mtcars)
describe(mtcars)
summary(mtcars)
describe(mtcars)
install.packages("descr")
require(descr)
df <- data.frame(id = c(1,2,4),
gender = c('남', '여', '남'))
table(df$gender)
freq(df$gender)
freq(df$gender, plot = F )
freq(df$gender, plot = F )
freq(df$gender)
freq(df$gender, plot = F )
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
sum(is.na(ds))
col_na <- function(y){
return( sum (is.na (y) ) )
}
na_count <- apply(ds,2,col_na)
na_count
rowSums(is.na(ds))                 # 결측치가 포함된 행들 표시
sum( rowSums ( is.na( ds ) ) > 0 ) # 결측치가 포함된 행이 몇줄이냐
sum(is.na(ds))                     # 결측치가 몇개냐
ds1 <- ds[ complete.cases(ds), ]
ds1
st <- data.frame(state.x77)
summary(st$Income)
boxplot(st$Income)
boxplot.stats(st$Income)$out
na.out <- boxplot.stats(st$Income)$out
st$Income[st$Income %in% na.out] <- NA
st2 <- st[ complete.cases(st), ]
AQ <- data.frame(airquality)
col_na <- function(y){
return( sum (is.na (y) ) )
}
na_count <- apply(QA,2,col_na)
na_count
AQ <- data.frame(airquality)
sum(is.na(AQ))
na_count <- apply(QA,2,col_na)
na_count
na_count1 <- apply(QA,2,col_na)
na_count1
col_na <- function(y){
return( sum (is.na (y) ) )
}
na_count1 <- apply(QA,2,col_na)
na_count1
col_na <- function(y){
return( sum (is.na (y) ) )
}
na_count1 <- apply(AQ,2,col_na)
na_count1
AQ
na_count1 <- apply(AQ,2,col_na)
na_count1
rowSums(is.na(AQ))                 # 결측치가 포함된 행들 표시
sum(is.na(AQ))                     # 결측치가 몇개냐
AQ1 <- AQ[ -complete.cases(AQ)]
AQ1
AQ1 <- AQ[ -complete.cases(AQ),]
AQ1
AQ1 <- AQ[ !complete.cases(AQ),]
AQ1
AQ[ complete.cases(AQ),]
AQ1 %>% summarise(mean_Ozone = mean(Ozone))
AQ1
AQ1 <- AQ[ complete.cases(AQ),]   # 결측치가 포함되지 않은 것들만 출력
AQ1 %>% summarise(mean_Ozone = mean(Ozone))
AQ_2 <- AQ1 %>% summarise(mean_Solar.R = mean(Solar.R))
AQ_2
AQ$Ozone[AQ$Ozone %in% NA] <- AQ_1
AQ_1 <- AQ1 %>% summarise(mean_Ozone = mean(Ozone))
AQ_2 <- AQ1 %>% summarise(mean_Solar.R = mean(Solar.R))
AQ$Ozone[AQ$Ozone %in% NA] <- AQ_1
AQ$Solar.R[AQ$Solar.R %in% NA] <- AQ_2
AQ
AQ_1 <- abs(AQ1 %>% summarise(mean_Ozone = mean(Ozone)))
AQ_2 <- abs(AQ1 %>% summarise(mean_Solar.R = mean(Solar.R)))
AQ_1
AQ2 <- data.frame(airquality)
AQ2
AQ2 <- AQ$Ozone[AQ$Ozone %in% NA] <- AQ_1
AQ2 <- AQ$Solar.R[AQ$Solar.R %in% NA] <- AQ_2
AQ2
AQ$Ozone[AQ$Ozone %in% NA] <- AQ_1
AQ$Solar.R[AQ$Solar.R %in% NA] <- AQ_2
AQ2
AQ2 <- data.frame(airquality)
source('D:/lyt/lyt09/문제/day7_lyt_20191204.R', encoding = 'UTF-8', echo=TRUE)
AQ2
AQ2 <- data.frame(airquality)
AQ2
AQ <- data.frame(airquality)
rowSums(is.na(AQ))                 # 결측치가 포함된 행
sum(is.na(AQ))                     # 결측치의 개수
AQ1 <- AQ[ complete.cases(AQ),]   # 결측치가 포함되지 않은 것들만 출력
AQ_1 <- abs(AQ1 %>% summarise(mean_Ozone = mean(Ozone)))
AQ_2 <- abs(AQ1 %>% summarise(mean_Solar.R = mean(Solar.R)))
AQ2 <- AQ$Ozone[AQ$Ozone %in% NA] <- AQ_1
AQ2 <- AQ$Solar.R[AQ$Solar.R %in% NA] <- AQ_2
AQ2
AQ <- data.frame(airquality)
AQ2 <- data.frame(airquality)
AQ
AQ_1
AQ_2
AQ$Ozone[AQ$Ozone %in% NA] <- AQ_1
AQ$Solar.R[AQ$Solar.R %in% NA] <- AQ_2
AQ
AQ2
AQ2 <- AQ
AQ2
st <- data.frame(state.x77)
st %>% arrange(Population)
st %>% arrange(desc(Income))
st %>% arrange(desc(Illiteracy),
head(10))
st %>% arrange(desc(Illiteracy),
head)
st %>% arrange(desc(Illiteracy) %>%
head(10))
st %>% arrange(desc(Illiteracy)) %>%
head(10)
st %>% arrange(Illiteracy) %>%
head(10)
car <- data.frame(mtcars)
mt.gear <- car %>% group_by(gear)
mt.gear
mt.gear <- split(car, car$gear)
mt.gear
subset(car, gear == 4)
mt.gear.35 <- subset(car, gear == 3 & gear == 5)
mt.gear.35
dim(mtcars)
#
# 11일차
#
# mosic plot
#     다중변수 범주형 데이터에 대한 각 변수의 그룹별 비율을 면적으로 표시
str(mtcars)
head(mtcars)
mosaicplot(~gear + vs,    # 대상 변수 ~다음이 X축 + 다음이 Y축
data = mtcars, # 데이터셋
color = T,     # y축 변수의 그룹별 음영 다르게 표시
main = "Gear and Vs") # 제목
rep(cars)
seq(cars)
a <- c(1,2,3,4,5,6,7)
a[1]
a[2]
